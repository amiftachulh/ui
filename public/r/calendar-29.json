{
  "name": "calendar-29",
  "type": "registry:block",
  "description": "Natural language date picker",
  "dependencies": [
    "chrono-node"
  ],
  "registryDependencies": [
    "calendar",
    "input",
    "label",
    "popover",
    "button"
  ],
  "files": [
    {
      "path": "registry/default/blocks/calendar-29.tsx",
      "type": "registry:component",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { LuCalendar } from \"react-icons/lu\";\nimport { parseDate } from \"chrono-node\";\nimport { css } from \"styled-system/css\";\nimport { styled } from \"styled-system/jsx\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport { Calendar } from \"@/registry/default/ui/calendar\";\nimport { Input } from \"@/registry/default/ui/input\";\nimport { Label } from \"@/registry/default/ui/label\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/registry/default/ui/popover\";\n\nfunction formatDate(date: Date | undefined) {\n  if (!date) {\n    return \"\";\n  }\n\n  return date.toLocaleDateString(\"en-US\", {\n    day: \"2-digit\",\n    month: \"long\",\n    year: \"numeric\",\n  });\n}\n\nexport default function Calendar29() {\n  const [open, setOpen] = React.useState(false);\n  const [value, setValue] = React.useState(\"In 2 days\");\n  const [date, setDate] = React.useState<Date | undefined>(parseDate(value) || undefined);\n  const [month, setMonth] = React.useState<Date | undefined>(date);\n\n  return (\n    <styled.div\n      css={{\n        w: \"full\",\n        bg: \"surface\",\n        minW: \"0\",\n        minH: \"svh\",\n        display: \"flex\",\n        px: \"4\",\n        py: \"12\",\n        alignItems: \"flex-start\",\n        justifyContent: \"center\",\n        md: { py: \"20\" },\n      }}\n    >\n      <styled.div css={{ display: \"flex\", flexDir: \"column\", gap: \"3\" }}>\n        <Label htmlFor=\"date\" css={{ px: \"1\" }}>\n          Schedule Date\n        </Label>\n        <styled.div css={{ position: \"relative\", display: \"flex\", gap: \"2\" }}>\n          <Input\n            id=\"date\"\n            value={value}\n            placeholder=\"Tomorrow or next week\"\n            css={{ pr: \"10\" }}\n            onChange={(e) => {\n              setValue(e.target.value);\n              const date = parseDate(e.target.value);\n              if (date) {\n                setDate(date);\n                setMonth(date);\n              }\n            }}\n            onKeyDown={(e) => {\n              if (e.key === \"ArrowDown\") {\n                e.preventDefault();\n                setOpen(true);\n              }\n            }}\n          />\n          <Popover open={open} onOpenChange={setOpen}>\n            <PopoverTrigger asChild>\n              <Button\n                id=\"date-picker\"\n                variant=\"ghost\"\n                css={{\n                  pos: \"absolute\",\n                  top: \"50%\",\n                  right: \"2\",\n                  w: \"6\",\n                  h: \"6\",\n                  transform: \"translateY(-50%)\",\n                }}\n              >\n                <LuCalendar className={css({ w: \"3.5\", h: \"3.5\" })} />\n                <styled.span css={{ srOnly: true }}>Select date</styled.span>\n              </Button>\n            </PopoverTrigger>\n            <PopoverContent css={{ w: \"auto\", overflow: \"hidden\", p: \"0\" }} align=\"end\">\n              <Calendar\n                mode=\"single\"\n                selected={date}\n                captionLayout=\"dropdown\"\n                month={month}\n                onMonthChange={setMonth}\n                onSelect={(date) => {\n                  setDate(date);\n                  setValue(formatDate(date));\n                  setOpen(false);\n                }}\n              />\n            </PopoverContent>\n          </Popover>\n        </styled.div>\n        <styled.div css={{ color: \"muted.fg\", px: \"1\", textStyle: \"sm\" }}>\n          Your post will be published on{\" \"}\n          <styled.span css={{ fontWeight: \"medium\" }}>{formatDate(date)}</styled.span>.\n        </styled.div>\n      </styled.div>\n    </styled.div>\n  );\n}\n"
    }
  ],
  "meta": {
    "iframeHeight": "600px",
    "mobile": "component"
  },
  "categories": [
    "calendar",
    "date"
  ]
}