{
  "name": "calendar",
  "type": "registry:ui",
  "dependencies": [
    "react-day-picker",
    "dayjs"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "registry/default/ui/calendar.tsx",
      "type": "registry:ui",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport {\n  DayPicker,\n  getDefaultClassNames,\n  type DayButton,\n  type DayPickerProps,\n} from \"react-day-picker\";\nimport { LuChevronDown, LuChevronLeft, LuChevronRight } from \"react-icons/lu\";\nimport { css, cx } from \"styled-system/css\";\nimport { styled } from \"styled-system/jsx\";\nimport { button, type ButtonVariantProps } from \"styled-system/recipes\";\nimport { Button } from \"@/registry/default/ui/button\";\n\nfunction CalendarBase({\n  className,\n  classNames,\n  showOutsideDays = true,\n  captionLayout = \"label\",\n  buttonVariant = \"ghost\",\n  formatters,\n  components,\n  ...props\n}: DayPickerProps & {\n  buttonVariant?: ButtonVariantProps[\"variant\"];\n}) {\n  const defaultClassNames = getDefaultClassNames();\n\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cx(\n        css({\n          bg: \"bg\",\n          p: \"3\",\n          \"--cell-size\": \"2rem\",\n          \".card__content &\": {\n            bg: \"transparent\",\n          },\n          \".popover__content &\": {\n            bg: \"transparent\",\n          },\n          \"&[dir='rtl'] .rdp-button_next > svg\": {\n            transform: \"rotate(180deg)\",\n          },\n          \"&[dir='rtl'] .rdp-button_previous > svg\": {\n            transform: \"rotate(180deg)\",\n          },\n        }),\n        className\n      )}\n      captionLayout={captionLayout}\n      formatters={{\n        formatMonthDropdown: (date) => date.toLocaleString(\"default\", { month: \"short\" }),\n        ...formatters,\n      }}\n      classNames={{\n        root: cx(defaultClassNames.root, css({ w: \"fit\" })),\n        months: cx(\n          defaultClassNames.months,\n          css({\n            pos: \"relative\",\n            display: \"flex\",\n            flexDir: \"column\",\n            gap: \"4\",\n            md: { flexDir: \"row\" },\n          })\n        ),\n        month: cx(\n          defaultClassNames.month,\n          css({ display: \"flex\", flexDir: \"column\", w: \"full\", gap: \"4\" })\n        ),\n        nav: cx(\n          defaultClassNames.nav,\n          css({\n            pos: \"absolute\",\n            top: \"0\",\n            insetX: \"0\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"space-between\",\n            gap: \"1\",\n            w: \"full\",\n          })\n        ),\n        button_previous: cx(\n          defaultClassNames.button_previous,\n          button({ variant: buttonVariant }),\n          css({\n            w: \"var(--cell-size)\",\n            h: \"var(--cell-size)\",\n            p: \"0\",\n            userSelect: \"none\",\n            _disabled: { opacity: \"0.5\" },\n          })\n        ),\n        button_next: cx(\n          defaultClassNames.button_next,\n          button({ variant: buttonVariant }),\n          css({\n            w: \"var(--cell-size)\",\n            h: \"var(--cell-size)\",\n            p: \"0\",\n            userSelect: \"none\",\n            _disabled: { opacity: \"0.5\" },\n          })\n        ),\n        month_caption: cx(\n          defaultClassNames.month_caption,\n          css({\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            w: \"full\",\n            h: \"var(--cell-size)\",\n            px: \"var(--cell-size)\",\n          })\n        ),\n        dropdowns: cx(\n          defaultClassNames.dropdowns,\n          css({\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            gap: \"1.5\",\n            w: \"full\",\n            h: \"var(--cell-size)\",\n            textStyle: \"sm\",\n            fontWeight: \"medium\",\n          })\n        ),\n        dropdown_root: cx(\n          defaultClassNames.dropdown_root,\n          css({\n            pos: \"relative\",\n            borderWidth: \"1px\",\n            borderColor: \"input\",\n            rounded: \"md\",\n            shadow: \"xs\",\n            _focusWithin: {\n              borderColor: \"ring\",\n              outlineWidth: \"3px\",\n              outlineStyle: \"solid\",\n              outlineColor: \"ring/50\",\n            },\n          })\n        ),\n        dropdown: cx(\n          defaultClassNames.dropdown,\n          css({\n            pos: \"absolute\",\n            bg: \"popover\",\n            inset: \"0\",\n            opacity: \"0\",\n          })\n        ),\n        caption_label: cx(\n          defaultClassNames.caption_label,\n          css({ userSelect: \"none\", fontWeight: \"medium\" }),\n          captionLayout === \"label\"\n            ? css({ textStyle: \"sm\" })\n            : css({\n                display: \"flex\",\n                alignItems: \"center\",\n                gap: \"1\",\n                h: \"8\",\n                pl: \"2\",\n                pr: \"1\",\n                rounded: \"md\",\n                textStyle: \"sm\",\n                \"& > svg\": {\n                  color: \"muted.fg\",\n                  w: \"3.5\",\n                  h: \"3.5\",\n                },\n              })\n        ),\n        table: css({ w: \"full\", borderCollapse: \"collapse\" }),\n        weekdays: cx(defaultClassNames.weekdays, css({ display: \"flex\" })),\n        weekday: cx(\n          defaultClassNames.weekday,\n          css({\n            color: \"muted.fg\",\n            rounded: \"md\",\n            flex: \"1\",\n            fontWeight: \"normal\",\n            fontSize: \"0.8rem\",\n            userSelect: \"none\",\n          })\n        ),\n        week: cx(defaultClassNames.week, css({ display: \"flex\", w: \"full\", mt: \"2\" })),\n        week_number_header: cx(\n          defaultClassNames.week_number_header,\n          css({ userSelect: \"none\", w: \"var(--cell-size)\" })\n        ),\n        week_number: cx(\n          defaultClassNames.week_number,\n          css({ color: \"muted.fg\", fontSize: \"0.8rem\", userSelect: \"none\" })\n        ),\n        day: cx(\n          defaultClassNames.day,\n          css({\n            pos: \"relative\",\n            w: \"full\",\n            h: \"full\",\n            p: \"0\",\n            textAlign: \"center\",\n            \"&:first-child[data-selected=true] button\": {\n              roundedLeft: \"md\",\n            },\n            \"&:last-child[data-selected=true] button\": {\n              roundedRight: \"md\",\n            },\n            aspectRatio: \"square\",\n            userSelect: \"none\",\n          })\n        ),\n        range_start: cx(defaultClassNames.range_start, css({ bg: \"accent\", roundedLeft: \"md\" })),\n        range_middle: cx(defaultClassNames.range_middle, css({ rounded: \"0\" })),\n        range_end: cx(defaultClassNames.range_end, css({ bg: \"accent\", roundedRight: \"md\" })),\n        today: cx(\n          defaultClassNames.today,\n          css({\n            bg: \"accent\",\n            color: \"accent.fg\",\n            rounded: \"md\",\n            \"&[data-selected=true]\": { rounded: \"0\" },\n          })\n        ),\n        outside: cx(\n          defaultClassNames.outside,\n          css({ color: \"muted.fg\", \"&[aria-selected]\": { color: \"muted.fg\" } })\n        ),\n        disabled: cx(defaultClassNames.disabled, css({ color: \"muted.fg\", opacity: \"0.5\" })),\n        hidden: cx(defaultClassNames.hidden, css({ visibility: \"hidden\" })),\n        ...classNames,\n      }}\n      components={{\n        Chevron: ({ className, orientation, ...props }) => {\n          if (orientation === \"left\") {\n            return <LuChevronLeft className={cx(css({ w: \"4\", h: \"4\" }), className)} {...props} />;\n          }\n\n          if (orientation === \"right\") {\n            return <LuChevronRight className={cx(css({ w: \"4\", h: \"4\" }), className)} {...props} />;\n          }\n\n          return <LuChevronDown className={cx(css({ w: \"4\", h: \"4\" }), className)} {...props} />;\n        },\n        DayButton: CalendarDayButton,\n        WeekNumber: ({ children, ...props }) => {\n          return (\n            <td {...props}>\n              <div\n                className={css({\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"center\",\n                  w: \"var(--cell-size)\",\n                  h: \"var(--cell-size)\",\n                  textAlign: \"center\",\n                })}\n              >\n                {children}\n              </div>\n            </td>\n          );\n        },\n        ...components,\n      }}\n      {...props}\n    />\n  );\n}\n\nfunction CalendarDayButton({\n  className,\n  modifiers,\n  ...props\n}: React.ComponentProps<typeof DayButton>) {\n  const defaultClassNames = getDefaultClassNames();\n\n  const ref = React.useRef<HTMLButtonElement>(null);\n  React.useEffect(() => {\n    if (modifiers.focused) ref.current?.focus();\n  }, [modifiers.focused]);\n\n  return (\n    <Button\n      ref={ref}\n      variant=\"ghost\"\n      size=\"icon\"\n      data-selected-single={\n        modifiers.selected &&\n        !modifiers.range_start &&\n        !modifiers.range_end &&\n        !modifiers.range_middle\n      }\n      data-range-start={modifiers.range_start}\n      data-range-end={modifiers.range_end}\n      data-range-middle={modifiers.range_middle}\n      className={cx(\n        defaultClassNames.day,\n        css({\n          display: \"flex\",\n          flexDir: \"column\",\n          gap: \"1\",\n          aspectRatio: \"square\",\n          w: \"full\",\n          minW: \"var(--cell-size)\",\n          h: \"auto\",\n          lineHeight: \"none\",\n          fontWeight: \"normal\",\n          \"&[data-selected-single=true]\": {\n            bg: \"primary\",\n            color: \"primary.fg\",\n          },\n          \"&[data-range-middle=true]\": {\n            bg: \"accent\",\n            color: \"accent.fg\",\n            rounded: \"0\",\n          },\n          \"&[data-range-start=true]\": {\n            bg: \"primary\",\n            color: \"primary.fg\",\n            rounded: \"md\",\n          },\n          \"&[data-range-end=true]\": {\n            bg: \"primary\",\n            color: \"primary.fg\",\n            rounded: \"md\",\n          },\n          \"& > span\": {\n            textStyle: \"xs\",\n            opacity: \"0.7\",\n          },\n        }),\n        className\n      )}\n      {...props}\n    />\n  );\n}\n\nconst Calendar = styled(CalendarBase);\n\nexport { Calendar, CalendarDayButton };\n"
    }
  ]
}