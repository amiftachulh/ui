{
  "name": "chart",
  "type": "registry:ui",
  "dependencies": [
    "recharts@2.15.4"
  ],
  "files": [
    {
      "path": "registry/default/ui/chart.tsx",
      "type": "registry:ui",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as RechartsPrimitive from \"recharts\";\nimport { css, cx } from \"styled-system/css\";\nimport { styled } from \"styled-system/jsx\";\nimport { chart } from \"styled-system/recipes\";\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const;\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode;\n    icon?: React.ComponentType;\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  );\n};\n\ntype ChartContextProps = {\n  config: ChartConfig;\n};\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null);\n\nfunction useChart() {\n  const context = React.useContext(ChartContext);\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\");\n  }\n\n  return context;\n}\n\nconst classes = chart();\n\nfunction Container({\n  id,\n  className,\n  children,\n  config,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  config: ChartConfig;\n  children: React.ComponentProps<typeof RechartsPrimitive.ResponsiveContainer>[\"children\"];\n}) {\n  const uniqueId = React.useId();\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`;\n\n  return (\n    <ChartContext value={{ config }}>\n      <div data-chart={chartId} className={cx(classes.container, className)} {...props}>\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>{children}</RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext>\n  );\n}\nconst ChartContainer = styled(Container);\nChartContainer.displayName = \"ChartContainer\";\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(([, config]) => config.theme || config.color);\n\n  if (!colorConfig.length) {\n    return null;\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color = itemConfig.theme?.[theme as keyof typeof itemConfig.theme] || itemConfig.color;\n    return color ? `  --color-${key}: ${color};` : null;\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  );\n};\n\nconst ChartTooltip = RechartsPrimitive.Tooltip;\n\nfunction ChartTooltipContent({\n  active,\n  payload,\n  className,\n  indicator = \"dot\",\n  hideLabel = false,\n  hideIndicator = false,\n  label,\n  labelFormatter,\n  labelClassName,\n  formatter,\n  color,\n  nameKey,\n  labelKey,\n}: React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n  React.ComponentProps<\"div\"> & {\n    hideLabel?: boolean;\n    hideIndicator?: boolean;\n    indicator?: \"line\" | \"dot\" | \"dashed\";\n    nameKey?: string;\n    labelKey?: string;\n  }) {\n  const { config } = useChart();\n\n  const tooltipLabel = React.useMemo(() => {\n    if (hideLabel || !payload?.length) {\n      return null;\n    }\n\n    const [item] = payload;\n    const key = `${labelKey || item.dataKey || item.name || \"value\"}`;\n    const itemConfig = getPayloadConfigFromPayload(config, item, key);\n    const value =\n      !labelKey && typeof label === \"string\"\n        ? config[label as keyof typeof config]?.label || label\n        : itemConfig?.label;\n\n    if (labelFormatter) {\n      return (\n        <div className={cx(classes.tooltipLabel, labelClassName)}>\n          {labelFormatter(value, payload)}\n        </div>\n      );\n    }\n\n    if (!value) {\n      return null;\n    }\n\n    return <div className={cx(classes.tooltipLabel, labelClassName)}>{value}</div>;\n  }, [label, labelFormatter, payload, hideLabel, labelClassName, config, labelKey]);\n\n  if (!active || !payload?.length) {\n    return null;\n  }\n\n  const nestLabel = payload.length === 1 && indicator !== \"dot\";\n\n  return (\n    <div className={cx(classes.tooltipContent, className)}>\n      {!nestLabel ? tooltipLabel : null}\n      <div className={css({ display: \"grid\", gap: \"1.5\" })}>\n        {payload.map((item, index) => {\n          const key = `${nameKey || item.name || item.dataKey || \"value\"}`;\n          const itemConfig = getPayloadConfigFromPayload(config, item, key);\n          const indicatorColor = color || item.payload.fill || item.color;\n\n          return (\n            <div\n              key={item.dataKey}\n              data-indicator={indicator}\n              className={cx(\n                css({\n                  display: \"flex\",\n                  w: \"full\",\n                  flexWrap: \"wrap\",\n                  alignItems: \"stretch\",\n                  gap: \"2\",\n                  \"&[data-indicator=dot]\": { alignItems: \"center\" },\n                  \"& > svg\": {\n                    color: \"muted.fg\",\n                    w: \"2.5\",\n                    h: \"2.5\",\n                  },\n                })\n              )}\n            >\n              {formatter && item?.value !== undefined && item.name ? (\n                formatter(item.value, item.name, item, index, item.payload)\n              ) : (\n                <>\n                  {itemConfig?.icon ? (\n                    <itemConfig.icon />\n                  ) : (\n                    !hideIndicator && (\n                      <div\n                        data-indicator={indicator}\n                        data-nest-label={nestLabel}\n                        className={cx(\n                          css({\n                            flexShrink: \"0\",\n                            rounded: \"2px\",\n                            borderColor: \"var(--color-border)\",\n                            bg: \"var(--color-bg)\",\n                            \"&[data-indicator=dot]\": {\n                              w: \"2.5\",\n                              h: \"2.5\",\n                            },\n                            \"&[data-indicator=line]\": {\n                              w: \"1\",\n                            },\n                            \"&[data-indicator=dashed]\": {\n                              w: \"0\",\n                              borderWidth: \"1.5px\",\n                              borderStyle: \"dashed\",\n                              bg: \"transparent\",\n                            },\n                            \"&[data-nest-label=true][data-indicator=dashed]\": { my: \"0.5\" },\n                          })\n                        )}\n                        style={\n                          {\n                            \"--color-bg\": indicatorColor,\n                            \"--color-border\": indicatorColor,\n                          } as React.CSSProperties\n                        }\n                      />\n                    )\n                  )}\n                  <div\n                    data-nest-label={nestLabel}\n                    className={cx(\n                      css({\n                        display: \"flex\",\n                        flex: \"1\",\n                        justifyContent: \"space-between\",\n                        lineHeight: \"none\",\n                        textAlign: \"center\",\n                        \"&[data-nest-label=true]\": { alignItems: \"flex-end\" },\n                      })\n                    )}\n                  >\n                    <div className={css({ display: \"grid\", gap: \"1.5\" })}>\n                      {nestLabel ? tooltipLabel : null}\n                      <span className={css({ color: \"muted.fg\" })}>\n                        {itemConfig?.label || item.name}\n                      </span>\n                    </div>\n                    {item.value && (\n                      <span\n                        className={css({\n                          color: \"fg\",\n                          fontFamily: \"mono\",\n                          fontWeight: \"medium\",\n                          fontVariantNumeric: \"tabular-nums\",\n                        })}\n                      >\n                        {item.value.toLocaleString()}\n                      </span>\n                    )}\n                  </div>\n                </>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nconst ChartLegend = RechartsPrimitive.Legend;\n\nfunction ChartLegendContent({\n  className,\n  hideIcon = false,\n  payload,\n  verticalAlign = \"bottom\",\n  nameKey,\n}: React.ComponentProps<\"div\"> &\n  Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n    hideIcon?: boolean;\n    nameKey?: string;\n  }) {\n  const { config } = useChart();\n\n  if (!payload?.length) {\n    return null;\n  }\n\n  return (\n    <div data-vertical-align={verticalAlign} className={cx(classes.legendContent, className)}>\n      {payload.map((item) => {\n        const key = `${nameKey || item.dataKey || \"value\"}`;\n        const itemConfig = getPayloadConfigFromPayload(config, item, key);\n\n        return (\n          <div\n            key={item.value}\n            className={css({\n              display: \"flex\",\n              alignItems: \"center\",\n              gap: \"1.5\",\n              \"& > svg\": {\n                color: \"muted.fg\",\n                w: \"3\",\n                h: \"3\",\n              },\n            })}\n          >\n            {itemConfig?.icon && !hideIcon ? (\n              <itemConfig.icon />\n            ) : (\n              <div\n                className={css({\n                  w: \"2\",\n                  h: \"2\",\n                  flexShrink: \"0\",\n                  rounded: \"2px\",\n                })}\n                style={{\n                  backgroundColor: item.color,\n                }}\n              />\n            )}\n            {itemConfig?.label}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(config: ChartConfig, payload: unknown, key: string) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined;\n  }\n\n  const payloadPayload =\n    \"payload\" in payload && typeof payload.payload === \"object\" && payload.payload !== null\n      ? payload.payload\n      : undefined;\n\n  let configLabelKey: string = key;\n\n  if (key in payload && typeof payload[key as keyof typeof payload] === \"string\") {\n    configLabelKey = payload[key as keyof typeof payload] as string;\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[key as keyof typeof payloadPayload] as string;\n  }\n\n  return configLabelKey in config ? config[configLabelKey] : config[key as keyof typeof config];\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n};\n"
    },
    {
      "path": "registry/default/slot-recipes/chart.ts",
      "type": "registry:slot-recipe",
      "content": "import { defineSlotRecipe } from \"@pandacss/dev\";\n\nexport const chartSlotRecipe = defineSlotRecipe({\n  className: \"chart\",\n  slots: [\"container\", \"tooltipLabel\", \"tooltipContent\", \"legendContent\"],\n  base: {\n    container: {\n      \"& .recharts-cartesian-axis-tick text\": {\n        fill: \"muted.fg\",\n      },\n      \"& .recharts-cartesian-grid line[stroke='#ccc']\": {\n        stroke: \"border/50\",\n      },\n      \"& .recharts-curve.recharts-tooltip-cursor\": {\n        stroke: \"border\",\n      },\n      \"& .recharts-polar-grid [stroke='#ccc']\": {\n        stroke: \"border\",\n      },\n      \"& .recharts-radial-bar-background-sector\": {\n        fill: \"muted\",\n      },\n      \"& .recharts-rectangle.recharts-tooltip-cursor\": {\n        fill: \"muted/50\",\n      },\n      \"& .recharts-reference-line [stroke='#ccc']\": {\n        stroke: \"border\",\n      },\n      display: \"flex\",\n      aspectRatio: \"16 / 9\",\n      justifyContent: \"center\",\n      textStyle: \"xs\",\n      \"& .recharts-dot[stroke='#fff']\": {\n        stroke: \"transparent\",\n      },\n      \"& .recharts-layer\": {\n        outline: \"none\",\n      },\n      \"& .recharts-sector\": {\n        outline: \"none\",\n      },\n      \"& .recharts-sector[stroke='#fff']\": {\n        stroke: \"transparent\",\n      },\n      \"& .recharts-surface\": {\n        outline: \"none\",\n      },\n    },\n\n    tooltipLabel: {\n      fontWeight: \"medium\",\n    },\n\n    tooltipContent: {\n      borderColor: \"border/50\",\n      bg: \"bg\",\n      display: \"grid\",\n      minW: \"8rem\",\n      alignItems: \"start\",\n      gap: \"1.5\",\n      rounded: \"lg\",\n      borderWidth: \"1px\",\n      px: \"2.5\",\n      py: \"1.5\",\n      textStyle: \"xs\",\n      shadow: \"xl\",\n    },\n\n    legendContent: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      gap: \"4\",\n      pt: \"3\",\n      \"&[data-vertical-align=top]\": {\n        pb: \"3\",\n      },\n    },\n  },\n});\n"
    }
  ]
}