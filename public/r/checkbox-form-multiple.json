{
  "name": "checkbox-form-multiple",
  "type": "registry:example",
  "registryDependencies": [
    "checkbox"
  ],
  "files": [
    {
      "path": "registry/default/examples/checkbox-form-multiple.tsx",
      "type": "registry:example",
      "content": "\"use client\";\n\nimport { Controller, useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { styled } from \"styled-system/jsx\";\nimport { z } from \"zod\";\nimport { toast } from \"@/registry/default/hooks/use-toast\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport { Checkbox } from \"@/registry/default/ui/checkbox\";\nimport {\n  Field,\n  FieldControl,\n  FieldDescription,\n  FieldError,\n  FieldLabel,\n} from \"@/registry/default/ui/field\";\n\nconst items = [\n  {\n    id: \"recents\",\n    label: \"Recents\",\n  },\n  {\n    id: \"home\",\n    label: \"Home\",\n  },\n  {\n    id: \"applications\",\n    label: \"Applications\",\n  },\n  {\n    id: \"desktop\",\n    label: \"Desktop\",\n  },\n  {\n    id: \"downloads\",\n    label: \"Downloads\",\n  },\n  {\n    id: \"documents\",\n    label: \"Documents\",\n  },\n] as const;\n\nconst formSchema = z.object({\n  items: z.array(z.string()).refine((value) => value.some((item) => item), {\n    message: \"You have to select at least one item.\",\n  }),\n});\n\ntype FormSchema = z.infer<typeof formSchema>;\n\nexport default function CheckboxFormMultiple() {\n  const form = useForm<FormSchema>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      items: [\"recents\", \"home\"],\n    },\n  });\n\n  const onSubmit = form.handleSubmit((data) => {\n    toast({\n      title: \"You submitted the following values:\",\n      description: (\n        <styled.pre\n          css={{ mt: \"2\", w: \"340px\", rounded: \"md\", bg: \"slate.950\", p: \"4\", borderWidth: \"1px\" }}\n        >\n          <styled.code css={{ color: \"white\" }}>{JSON.stringify(data, null, 2)}</styled.code>\n        </styled.pre>\n      ),\n    });\n  });\n\n  return (\n    <styled.form onSubmit={onSubmit} css={{ spaceY: \"8\" }}>\n      <Controller\n        control={form.control}\n        name=\"items\"\n        render={({ field, fieldState }) => (\n          <Field invalid={fieldState.invalid}>\n            <styled.div css={{ mb: \"4\" }}>\n              <FieldLabel css={{ textStyle: \"md\" }}>Sidebar</FieldLabel>\n              <FieldDescription>\n                Select the items you want to display in the sidebar.\n              </FieldDescription>\n            </styled.div>\n            {items.map((item) => (\n              <styled.div\n                key={item.id}\n                css={{\n                  display: \"flex!\",\n                  flexDir: \"row!\",\n                  alignItems: \"center\",\n                  gap: \"2\",\n                }}\n              >\n                <FieldControl>\n                  <Checkbox\n                    checked={field.value?.includes(item.id)}\n                    onCheckedChange={(checked) => {\n                      return checked\n                        ? field.onChange([...field.value, item.id])\n                        : field.onChange(field.value?.filter((value: string) => value !== item.id));\n                    }}\n                  />\n                </FieldControl>\n                <FieldLabel css={{ fontWeight: \"normal\" }}>{item.label}</FieldLabel>\n              </styled.div>\n            ))}\n            <FieldError>{fieldState.error?.message}</FieldError>\n          </Field>\n        )}\n      />\n      <Button type=\"submit\">Submit</Button>\n    </styled.form>\n  );\n}\n"
    }
  ]
}