{
  "name": "combobox-async",
  "type": "registry:example",
  "registryDependencies": [
    "command"
  ],
  "files": [
    {
      "path": "registry/default/examples/combobox-async.tsx",
      "type": "registry:example",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { LuCheck, LuChevronsUpDown, LuLoader } from \"react-icons/lu\";\nimport { css } from \"styled-system/css\";\nimport { styled } from \"styled-system/jsx\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/registry/default/ui/command\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/registry/default/ui/popover\";\n\ninterface Framework {\n  value: string;\n  label: string;\n}\n\nexport default function ComboboxAsync() {\n  const [open, setOpen] = React.useState(false);\n  const [value, setValue] = React.useState(\"\");\n  const [searchQuery, setSearchQuery] = React.useState(\"\");\n  const [frameworks, setFrameworks] = React.useState<Framework[]>([]);\n  const [isLoading, setIsLoading] = React.useState(false);\n\n  React.useEffect(() => {\n    if (open) {\n      fetchFrameworks(searchQuery);\n    }\n  }, [open, searchQuery]);\n\n  const fetchFrameworks = async (query: string) => {\n    setIsLoading(true);\n    try {\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n\n      const mockData = [\n        { value: \"next.js\", label: \"Next.js\" },\n        { value: \"sveltekit\", label: \"SvelteKit\" },\n        { value: \"nuxt.js\", label: \"Nuxt.js\" },\n        { value: \"remix\", label: \"Remix\" },\n        { value: \"astro\", label: \"Astro\" },\n      ].filter((item) => (query ? item.label.toLowerCase().includes(query.toLowerCase()) : true));\n\n      setFrameworks(mockData);\n    } catch (error) {\n      console.error(\"Error fetching frameworks:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleInputChange = (value: string) => {\n    setSearchQuery(value);\n  };\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={open}\n          css={{ w: \"200px\", justifyContent: \"space-between\" }}\n        >\n          {value\n            ? frameworks.find((framework) => framework.value === value)?.label ||\n              \"Select framework...\"\n            : \"Select framework...\"}\n          <LuChevronsUpDown className={css({ opacity: \"0.5\" })} />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent css={{ w: \"200px\", p: \"0\" }}>\n        <Command>\n          <CommandInput\n            placeholder=\"Search framework...\"\n            value={searchQuery}\n            onValueChange={handleInputChange}\n          />\n          <CommandList>\n            {isLoading ? (\n              <styled.div\n                css={{\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"center\",\n                  py: \"2\",\n                  px: \"2\",\n                  color: \"gray.500\",\n                  fontSize: \"sm\",\n                }}\n              >\n                <LuLoader\n                  className={css({\n                    animation: \"spin 2s linear infinite\",\n                    mr: \"2\",\n                  })}\n                />\n                <span>Loading frameworks...</span>\n              </styled.div>\n            ) : (\n              <>\n                <CommandEmpty>No framework found.</CommandEmpty>\n                <CommandGroup>\n                  {frameworks.map((framework) => (\n                    <CommandItem\n                      key={framework.value}\n                      value={framework.value}\n                      onSelect={(currentValue) => {\n                        setValue(currentValue === value ? \"\" : currentValue);\n                        setOpen(false);\n                      }}\n                    >\n                      {framework.label}\n                      <LuCheck\n                        className={css({\n                          ml: \"auto\",\n                          opacity: value === framework.value ? \"1\" : \"0\",\n                        })}\n                      />\n                    </CommandItem>\n                  ))}\n                </CommandGroup>\n              </>\n            )}\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}\n"
    }
  ]
}