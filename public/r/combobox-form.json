{
  "name": "combobox-form",
  "type": "registry:example",
  "registryDependencies": [
    "command"
  ],
  "files": [
    {
      "path": "registry/default/examples/combobox-form.tsx",
      "type": "registry:example",
      "content": "\"use client\";\n\nimport { Controller, useForm } from \"react-hook-form\";\nimport { LuCheck, LuChevronsUpDown } from \"react-icons/lu\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { css } from \"styled-system/css\";\nimport { styled } from \"styled-system/jsx\";\nimport { z } from \"zod\";\nimport { toast } from \"@/registry/default/hooks/use-toast\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/registry/default/ui/command\";\nimport {\n  Field,\n  FieldControl,\n  FieldDescription,\n  FieldError,\n  FieldLabel,\n} from \"@/registry/default/ui/field\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/registry/default/ui/popover\";\n\nconst languages = [\n  { label: \"English\", value: \"en\" },\n  { label: \"French\", value: \"fr\" },\n  { label: \"German\", value: \"de\" },\n  { label: \"Spanish\", value: \"es\" },\n  { label: \"Portuguese\", value: \"pt\" },\n  { label: \"Russian\", value: \"ru\" },\n  { label: \"Japanese\", value: \"ja\" },\n  { label: \"Korean\", value: \"ko\" },\n  { label: \"Chinese\", value: \"zh\" },\n] as const;\n\nconst formSchema = z.object({\n  language: z.string({\n    required_error: \"Please select a language.\",\n  }),\n});\n\ntype FormSchema = z.infer<typeof formSchema>;\n\nexport default function ComboboxForm() {\n  const form = useForm<FormSchema>({\n    resolver: zodResolver(formSchema),\n  });\n\n  const onSubmit = form.handleSubmit((data) => {\n    toast({\n      title: \"You submitted the following values:\",\n      description: (\n        <styled.pre\n          css={{ mt: \"2\", w: \"340px\", rounded: \"md\", bg: \"slate.950\", p: \"4\", borderWidth: \"1px\" }}\n        >\n          <styled.code css={{ color: \"white\" }}>{JSON.stringify(data, null, 2)}</styled.code>\n        </styled.pre>\n      ),\n    });\n  });\n\n  return (\n    <styled.form onSubmit={onSubmit} css={{ spaceY: \"6\" }}>\n      <Controller\n        control={form.control}\n        name=\"language\"\n        render={({ field, fieldState }) => (\n          <Field invalid={fieldState.invalid} css={{ display: \"flex\", flexDir: \"column\" }}>\n            <FieldLabel>Language</FieldLabel>\n            <Popover>\n              <PopoverTrigger asChild>\n                <FieldControl>\n                  <Button\n                    variant=\"outline\"\n                    role=\"combobox\"\n                    css={{\n                      w: \"200px\",\n                      justifyContent: \"space-between\",\n                      color: !field.value ? \"muted.fg\" : undefined,\n                    }}\n                  >\n                    {field.value\n                      ? languages.find((language) => language.value === field.value)?.label\n                      : \"Select language\"}\n                    <LuChevronsUpDown\n                      className={css({\n                        ml: \"2\",\n                        w: \"4\",\n                        h: \"4\",\n                        flexShrink: \"0\",\n                        opacity: \"0.5\",\n                      })}\n                    />\n                  </Button>\n                </FieldControl>\n              </PopoverTrigger>\n              <PopoverContent css={{ w: \"200px\", p: \"0\" }}>\n                <Command>\n                  <CommandInput placeholder=\"Search language...\" />\n                  <CommandList>\n                    <CommandEmpty>No language found.</CommandEmpty>\n                    <CommandGroup>\n                      {languages.map((language) => (\n                        <CommandItem\n                          value={language.label}\n                          key={language.value}\n                          onSelect={() => {\n                            form.setValue(\"language\", language.value);\n                          }}\n                        >\n                          {language.label}\n                          <LuCheck\n                            className={css({\n                              ml: \"auto\",\n                              opacity: language.value === field.value ? \"1\" : \"0\",\n                            })}\n                          />\n                        </CommandItem>\n                      ))}\n                    </CommandGroup>\n                  </CommandList>\n                </Command>\n              </PopoverContent>\n            </Popover>\n            <FieldDescription>\n              This is the language that will be used in the dashboard.\n            </FieldDescription>\n            <FieldError>{fieldState.error?.message}</FieldError>\n          </Field>\n        )}\n      />\n      <Button type=\"submit\">Submit</Button>\n    </styled.form>\n  );\n}\n"
    }
  ]
}