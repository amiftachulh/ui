{
  "name": "combobox-multi",
  "type": "registry:example",
  "registryDependencies": [
    "command"
  ],
  "files": [
    {
      "path": "registry/default/examples/combobox-multi.tsx",
      "type": "registry:example",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { LuCheck, LuChevronsUpDown } from \"react-icons/lu\";\nimport { css } from \"styled-system/css\";\nimport { styled } from \"styled-system/jsx\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/registry/default/ui/command\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/registry/default/ui/popover\";\n\nconst frameworks = [\n  { value: \"next.js\", label: \"Next.js\" },\n  { value: \"sveltekit\", label: \"SvelteKit\" },\n  { value: \"nuxt.js\", label: \"Nuxt.js\" },\n  { value: \"remix\", label: \"Remix\" },\n  { value: \"astro\", label: \"Astro\" },\n];\n\ntype Framework = (typeof frameworks)[number];\n\nexport default function ComboboxMulti() {\n  const [open, setOpen] = React.useState(false);\n  const [selectedFrameworks, setSelectedFrameworks] = React.useState<Framework[]>([]);\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={open}\n          css={{ w: \"fit\", minW: \"280px\", justifyContent: \"space-between\" }}\n        >\n          {selectedFrameworks.length > 0\n            ? selectedFrameworks.map((framework) => framework.label).join(\", \")\n            : \"Select framework...\"}\n          <LuChevronsUpDown className={css({ color: \"muted.fg\" })} />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent align=\"start\" css={{ w: \"300px\", p: \"0\" }}>\n        <Command>\n          <CommandInput placeholder=\"Search framework...\" />\n          <CommandList>\n            <CommandEmpty>No framework found.</CommandEmpty>\n            <CommandGroup>\n              {frameworks.map((framework) => (\n                <CommandItem\n                  key={framework.value}\n                  value={framework.value}\n                  onSelect={(currentValue) => {\n                    setSelectedFrameworks(\n                      selectedFrameworks.some((f) => f.value === currentValue)\n                        ? selectedFrameworks.filter((f) => f.value !== currentValue)\n                        : [...selectedFrameworks, framework]\n                    );\n                  }}\n                >\n                  <styled.div\n                    data-selected={selectedFrameworks.some((f) => f.value === framework.value)}\n                    css={{\n                      borderWidth: \"1px\",\n                      borderColor: \"input\",\n                      pointerEvents: \"none\",\n                      w: \"4\",\n                      h: \"4\",\n                      flexShrink: \"0\",\n                      rounded: \"4px\",\n                      transition: \"all\",\n                      userSelect: \"none\",\n                      \"& > svg\": { opacity: \"0\" },\n                      \"&[data-selected=true]\": {\n                        borderColor: \"primary\",\n                        bg: \"primary\",\n                        color: \"primary.fg\",\n                        \"& > svg\": { opacity: \"1\" },\n                      },\n                    }}\n                  >\n                    <LuCheck className={css({ w: \"3.5\", h: \"3.5\", color: \"current\" })} />\n                  </styled.div>\n                  {framework.label}\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}\n"
    }
  ]
}