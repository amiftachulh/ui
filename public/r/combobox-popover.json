{
  "name": "combobox-popover",
  "type": "registry:example",
  "registryDependencies": [
    "combobox",
    "popover"
  ],
  "files": [
    {
      "path": "registry/default/examples/combobox-popover.tsx",
      "type": "registry:example",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { LuCircle, LuCircleArrowUp, LuCircleCheck, LuCircleHelp, LuCircleX } from \"react-icons/lu\";\nimport { css } from \"styled-system/css\";\nimport { styled } from \"styled-system/jsx\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/registry/default/ui/command\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/registry/default/ui/popover\";\n\ntype Status = {\n  value: string;\n  label: string;\n  icon: React.ElementType;\n};\n\nconst statuses: Status[] = [\n  { value: \"backlog\", label: \"Backlog\", icon: LuCircleHelp },\n  { value: \"todo\", label: \"Todo\", icon: LuCircle },\n  { value: \"in progress\", label: \"In Progress\", icon: LuCircleArrowUp },\n  { value: \"done\", label: \"Done\", icon: LuCircleCheck },\n  { value: \"canceled\", label: \"Canceled\", icon: LuCircleX },\n];\n\nexport default function ComboboxPopover() {\n  const [open, setOpen] = React.useState(false);\n  const [selectedStatus, setSelectedStatus] = React.useState<Status | null>(null);\n\n  return (\n    <styled.div css={{ display: \"flex\", alignItems: \"center\", gap: \"4\" }}>\n      <styled.p css={{ textStyle: \"sm\", color: \"muted.fg\" }}>Status</styled.p>\n      <Popover open={open} onOpenChange={setOpen}>\n        <PopoverTrigger asChild>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            css={{ width: \"150px\", justifyContent: \"flex-start\" }}\n          >\n            {selectedStatus ? (\n              <>\n                <selectedStatus.icon\n                  className={css({ marginRight: \"2\", width: \"4\", height: \"4\", flexShrink: \"0\" })}\n                />\n                {selectedStatus.label}\n              </>\n            ) : (\n              \"+ Set status\"\n            )}\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent side=\"right\" align=\"start\" css={{ p: \"0\" }}>\n          <Command>\n            <CommandInput placeholder=\"Change status...\" />\n            <CommandList>\n              <CommandEmpty>No results found.</CommandEmpty>\n              <CommandGroup>\n                {statuses.map((status) => (\n                  <CommandItem\n                    key={status.value}\n                    value={status.value}\n                    onSelect={(value) => {\n                      setSelectedStatus(statuses.find((s) => s.value === value) || null);\n                      setOpen(false);\n                    }}\n                  >\n                    <status.icon\n                      className={css({\n                        marginRight: \"2\",\n                        width: \"4\",\n                        height: \"4\",\n                        opacity: status.value === selectedStatus?.value ? \"1\" : \"0.4\",\n                      })}\n                    />\n                    <span>{status.label}</span>\n                  </CommandItem>\n                ))}\n              </CommandGroup>\n            </CommandList>\n          </Command>\n        </PopoverContent>\n      </Popover>\n    </styled.div>\n  );\n}\n"
    }
  ]
}