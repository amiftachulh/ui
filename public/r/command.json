{
  "name": "command",
  "type": "registry:ui",
  "dependencies": [
    "cmdk"
  ],
  "registryDependencies": [
    "dialog"
  ],
  "files": [
    {
      "path": "registry/default/ui/command.tsx",
      "type": "registry:ui",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { LuSearch } from \"react-icons/lu\";\nimport { Command as CommandPrimitive } from \"cmdk\";\nimport { css } from \"styled-system/css\";\nimport { createStyleContext, styled } from \"styled-system/jsx\";\nimport { command } from \"styled-system/recipes\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/registry/default/ui/dialog\";\n\nconst classes = command();\n\nconst { withProvider, withContext } = createStyleContext(command);\n\nconst Command = withProvider(CommandPrimitive, \"root\");\n\nfunction CommandDialogBase({\n  title = \"Command Palette\",\n  description = \"Search for a command...\",\n  children,\n  ...props\n}: React.ComponentProps<typeof Dialog> & {\n  title?: string;\n  description?: string;\n}) {\n  return (\n    <Dialog {...props}>\n      <DialogHeader css={{ srOnly: \"true\" }}>\n        <DialogTitle>{title}</DialogTitle>\n        <DialogDescription>{description}</DialogDescription>\n      </DialogHeader>\n      <DialogContent css={{ overflow: \"hidden\", p: \"0\", shadow: \"lg\" }}>\n        <Command className={classes.dialog}>{children}</Command>\n      </DialogContent>\n    </Dialog>\n  );\n}\nconst CommandDialog = styled(CommandDialogBase);\nCommandDialog.displayName = \"CommandDialog\";\n\nfunction Input(props: React.ComponentProps<typeof CommandPrimitive.Input>) {\n  return (\n    <div\n      className={css({ display: \"flex\", alignItems: \"center\", borderBottomWidth: \"1px\", px: \"3\" })}\n      cmdk-input-wrapper=\"\"\n    >\n      <LuSearch className={css({ mr: \"2\", w: \"4\", h: \"4\", flexShrink: \"0\", opacity: \"0.5\" })} />\n      <CommandPrimitive.Input {...props} />\n    </div>\n  );\n}\nconst CommandInput = withContext(Input, \"input\");\nconst CommandList = withContext(CommandPrimitive.List, \"list\");\nconst CommandEmpty = withContext(CommandPrimitive.Empty, \"empty\");\nconst CommandGroup = withContext(CommandPrimitive.Group, \"group\");\nconst CommandSeparator = withContext(CommandPrimitive.Separator, \"separator\");\nconst CommandItem = withContext(CommandPrimitive.Item, \"item\");\nconst CommandShortcut = withContext(\"span\", \"shortcut\");\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandSeparator,\n  CommandItem,\n  CommandShortcut,\n};\n"
    }
  ]
}