{
  "name": "create-style-context",
  "type": "registry:lib",
  "files": [
    {
      "path": "src/registry/default/lib/create-style-context.tsx",
      "type": "registry:lib",
      "content": "\"use client\";\n\nimport { createContext, useContext, type JSX } from \"react\";\nimport { cx } from \"styled-system/css\";\nimport { isCssProperty, styled, type StyledComponent } from \"styled-system/jsx\";\n\ntype Props = Record<string, unknown>;\ntype Recipe = {\n  __name__?: string;\n  (props?: Props): Props;\n  splitVariantProps: (props: Props) => [Props, Props];\n};\ntype Slot<R extends Recipe> = keyof ReturnType<R>;\ntype Options = { forwardProps?: string[] };\n\ntype VariantProps<R extends Recipe> = Parameters<R>[0] extends infer P ? P : never;\n\nconst shouldForwardProp = (prop: string, variantKeys: string[], options: Options = {}) =>\n  options.forwardProps?.includes(prop) || (!variantKeys.includes(prop) && !isCssProperty(prop));\n\nexport const createStyleContext = <R extends Recipe>(recipe: R) => {\n  const StyleContext = createContext<Record<Slot<R>, string> | null>(null);\n\n  function withRootProvider<T extends React.ComponentType<any>>(Component: T) {\n    const StyledComponent = (props: React.ComponentProps<T> & VariantProps<R>) => {\n      const [variantProps, otherProps] = recipe.splitVariantProps(props);\n      const slotStyles = recipe(variantProps) as Record<Slot<R>, string>;\n\n      return (\n        <StyleContext value={slotStyles}>\n          <Component {...(otherProps as React.ComponentProps<T>)} />\n        </StyleContext>\n      );\n    };\n\n    StyledComponent.displayName = toCapitalize(recipe.__name__ || \"Component\");\n    return StyledComponent;\n  }\n\n  function withProvider<T extends React.ComponentType<any> | keyof JSX.IntrinsicElements>(\n    Component: T,\n    slot: Slot<R>,\n    options?: Options\n  ) {\n    const StyledComponent = styled(\n      Component,\n      {},\n      {\n        shouldForwardProp: (prop, variantKeys) => shouldForwardProp(prop, variantKeys, options),\n      }\n    ) as StyledComponent<T>;\n\n    function StyledSlotProvider({\n      className,\n      ...props\n    }: React.ComponentProps<typeof StyledComponent> & VariantProps<R>) {\n      const [variantProps, otherProps] = recipe.splitVariantProps(props);\n      const slotStyles = recipe(variantProps) as Record<Slot<R>, string>;\n\n      return (\n        <StyleContext value={slotStyles}>\n          <StyledComponent\n            className={cx(slotStyles[slot], className)}\n            {...(otherProps as React.ComponentProps<T>)}\n          />\n        </StyleContext>\n      );\n    }\n\n    StyledSlotProvider.displayName = `${toCapitalize(recipe.__name__ || \"Component\")}${toCapitalize(String(slot))}`;\n    return StyledSlotProvider;\n  }\n\n  function withContext<T extends React.ComponentType<any> | keyof JSX.IntrinsicElements>(\n    Component: T,\n    slot: Slot<R>\n  ) {\n    const StyledComponent = styled(Component);\n\n    function StyledSlotComponent({\n      className,\n      ...props\n    }: React.ComponentProps<typeof StyledComponent>) {\n      const slotStyles = useContext(StyleContext);\n      return (\n        <StyledComponent\n          className={cx(slotStyles?.[slot], className)}\n          {...(props as React.ComponentProps<T>)}\n        />\n      );\n    }\n\n    StyledSlotComponent.displayName = `${toCapitalize(recipe.__name__ || \"Component\")}${toCapitalize(String(slot))}`;\n\n    return StyledSlotComponent;\n  }\n\n  return {\n    withRootProvider,\n    withProvider,\n    withContext,\n  };\n};\n\nfunction toCapitalize(str: string) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n"
    }
  ]
}