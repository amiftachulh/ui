{
  "name": "dashboard-01",
  "type": "registry:block",
  "description": "A dashboard with sidebar, charts and data table.",
  "dependencies": [
    "@dnd-kit/core",
    "@dnd-kit/modifiers",
    "@dnd-kit/sortable",
    "@dnd-kit/utilities",
    "@tanstack/react-table",
    "zod"
  ],
  "registryDependencies": [
    "sidebar",
    "breadcrumb",
    "separator",
    "label",
    "chart",
    "card",
    "select",
    "tabs",
    "table",
    "toggle-group",
    "badge",
    "button",
    "checkbox",
    "dropdown-menu",
    "drawer",
    "input",
    "avatar",
    "sheet",
    "sonner"
  ],
  "files": [
    {
      "path": "registry/default/blocks/dashboard-01/page.tsx",
      "type": "registry:page",
      "target": "app/dashboard/page.tsx",
      "content": "import { styled } from \"styled-system/jsx\";\nimport { AppSidebar } from \"@/registry/default/blocks/dashboard-01/components/app-sidebar\";\nimport { ChartAreaInteractive } from \"@/registry/default/blocks/dashboard-01/components/chart-area-interactive\";\nimport { DataTable } from \"@/registry/default/blocks/dashboard-01/components/data-table\";\nimport { SectionCards } from \"@/registry/default/blocks/dashboard-01/components/section-cards\";\nimport { SiteHeader } from \"@/registry/default/blocks/dashboard-01/components/site-header\";\nimport { SidebarInset, SidebarProvider } from \"@/registry/default/ui/sidebar\";\nimport data from \"./data.json\";\n\nexport default function Page() {\n  return (\n    <SidebarProvider\n      style={\n        {\n          \"--header-height\": \"3rem\",\n        } as React.CSSProperties\n      }\n    >\n      <AppSidebar variant=\"inset\" />\n      <SidebarInset>\n        <SiteHeader />\n        <styled.div css={{ display: \"flex\", flex: \"1\", flexDir: \"column\" }}>\n          <styled.div\n            css={{\n              containerName: \"main\",\n              containerType: \"inline-size\",\n              display: \"flex\",\n              flex: \"1\",\n              flexDir: \"column\",\n              gap: \"2\",\n            }}\n          >\n            <styled.div\n              css={{\n                display: \"flex\",\n                flexDir: \"column\",\n                gap: \"4\",\n                py: \"4\",\n                md: { gap: \"6\", py: \"6\" },\n              }}\n            >\n              <SectionCards />\n              <styled.div css={{ px: \"4\", lg: { px: \"6\" } }}>\n                <ChartAreaInteractive />\n              </styled.div>\n              <DataTable data={data} />\n            </styled.div>\n          </styled.div>\n        </styled.div>\n      </SidebarInset>\n    </SidebarProvider>\n  );\n}\n"
    },
    {
      "path": "registry/default/blocks/dashboard-01/data.json",
      "type": "registry:file",
      "target": "app/dashboard/data.json",
      "content": "[\n  {\n    \"id\": 1,\n    \"header\": \"Cover page\",\n    \"type\": \"Cover page\",\n    \"status\": \"In Process\",\n    \"target\": \"18\",\n    \"limit\": \"5\",\n    \"reviewer\": \"Eddie Lake\"\n  },\n  {\n    \"id\": 2,\n    \"header\": \"Table of contents\",\n    \"type\": \"Table of contents\",\n    \"status\": \"Done\",\n    \"target\": \"29\",\n    \"limit\": \"24\",\n    \"reviewer\": \"Eddie Lake\"\n  },\n  {\n    \"id\": 3,\n    \"header\": \"Executive summary\",\n    \"type\": \"Narrative\",\n    \"status\": \"Done\",\n    \"target\": \"10\",\n    \"limit\": \"13\",\n    \"reviewer\": \"Eddie Lake\"\n  },\n  {\n    \"id\": 4,\n    \"header\": \"Technical approach\",\n    \"type\": \"Narrative\",\n    \"status\": \"Done\",\n    \"target\": \"27\",\n    \"limit\": \"23\",\n    \"reviewer\": \"Jamik Tashpulatov\"\n  },\n  {\n    \"id\": 5,\n    \"header\": \"Design\",\n    \"type\": \"Narrative\",\n    \"status\": \"In Process\",\n    \"target\": \"2\",\n    \"limit\": \"16\",\n    \"reviewer\": \"Jamik Tashpulatov\"\n  },\n  {\n    \"id\": 6,\n    \"header\": \"Capabilities\",\n    \"type\": \"Narrative\",\n    \"status\": \"In Process\",\n    \"target\": \"20\",\n    \"limit\": \"8\",\n    \"reviewer\": \"Jamik Tashpulatov\"\n  },\n  {\n    \"id\": 7,\n    \"header\": \"Integration with existing systems\",\n    \"type\": \"Narrative\",\n    \"status\": \"In Process\",\n    \"target\": \"19\",\n    \"limit\": \"21\",\n    \"reviewer\": \"Jamik Tashpulatov\"\n  },\n  {\n    \"id\": 8,\n    \"header\": \"Innovation and Advantages\",\n    \"type\": \"Narrative\",\n    \"status\": \"Done\",\n    \"target\": \"25\",\n    \"limit\": \"26\",\n    \"reviewer\": \"Assign reviewer\"\n  },\n  {\n    \"id\": 9,\n    \"header\": \"Overview of EMR's Innovative Solutions\",\n    \"type\": \"Technical content\",\n    \"status\": \"Done\",\n    \"target\": \"7\",\n    \"limit\": \"23\",\n    \"reviewer\": \"Assign reviewer\"\n  },\n  {\n    \"id\": 10,\n    \"header\": \"Advanced Algorithms and Machine Learning\",\n    \"type\": \"Narrative\",\n    \"status\": \"Done\",\n    \"target\": \"30\",\n    \"limit\": \"28\",\n    \"reviewer\": \"Assign reviewer\"\n  },\n  {\n    \"id\": 11,\n    \"header\": \"Adaptive Communication Protocols\",\n    \"type\": \"Narrative\",\n    \"status\": \"Done\",\n    \"target\": \"9\",\n    \"limit\": \"31\",\n    \"reviewer\": \"Assign reviewer\"\n  },\n  {\n    \"id\": 12,\n    \"header\": \"Advantages Over Current Technologies\",\n    \"type\": \"Narrative\",\n    \"status\": \"Done\",\n    \"target\": \"12\",\n    \"limit\": \"0\",\n    \"reviewer\": \"Assign reviewer\"\n  },\n  {\n    \"id\": 13,\n    \"header\": \"Past Performance\",\n    \"type\": \"Narrative\",\n    \"status\": \"Done\",\n    \"target\": \"22\",\n    \"limit\": \"33\",\n    \"reviewer\": \"Assign reviewer\"\n  },\n  {\n    \"id\": 14,\n    \"header\": \"Customer Feedback and Satisfaction Levels\",\n    \"type\": \"Narrative\",\n    \"status\": \"Done\",\n    \"target\": \"15\",\n    \"limit\": \"34\",\n    \"reviewer\": \"Assign reviewer\"\n  },\n  {\n    \"id\": 15,\n    \"header\": \"Implementation Challenges and Solutions\",\n    \"type\": \"Narrative\",\n    \"status\": \"Done\",\n    \"target\": \"3\",\n    \"limit\": \"35\",\n    \"reviewer\": \"Assign reviewer\"\n  },\n  {\n    \"id\": 16,\n    \"header\": \"Security Measures and Data Protection Policies\",\n    \"type\": \"Narrative\",\n    \"status\": \"In Process\",\n    \"target\": \"6\",\n    \"limit\": \"36\",\n    \"reviewer\": \"Assign reviewer\"\n  },\n  {\n    \"id\": 17,\n    \"header\": \"Scalability and Future Proofing\",\n    \"type\": \"Narrative\",\n    \"status\": \"Done\",\n    \"target\": \"4\",\n    \"limit\": \"37\",\n    \"reviewer\": \"Assign reviewer\"\n  },\n  {\n    \"id\": 18,\n    \"header\": \"Cost-Benefit Analysis\",\n    \"type\": \"Plain language\",\n    \"status\": \"Done\",\n    \"target\": \"14\",\n    \"limit\": \"38\",\n    \"reviewer\": \"Assign reviewer\"\n  },\n  {\n    \"id\": 19,\n    \"header\": \"User Training and Onboarding Experience\",\n    \"type\": \"Narrative\",\n    \"status\": \"Done\",\n    \"target\": \"17\",\n    \"limit\": \"39\",\n    \"reviewer\": \"Assign reviewer\"\n  },\n  {\n    \"id\": 20,\n    \"header\": \"Future Development Roadmap\",\n    \"type\": \"Narrative\",\n    \"status\": \"Done\",\n    \"target\": \"11\",\n    \"limit\": \"40\",\n    \"reviewer\": \"Assign reviewer\"\n  },\n  {\n    \"id\": 21,\n    \"header\": \"System Architecture Overview\",\n    \"type\": \"Technical content\",\n    \"status\": \"In Process\",\n    \"target\": \"24\",\n    \"limit\": \"18\",\n    \"reviewer\": \"Maya Johnson\"\n  },\n  {\n    \"id\": 22,\n    \"header\": \"Risk Management Plan\",\n    \"type\": \"Narrative\",\n    \"status\": \"Done\",\n    \"target\": \"15\",\n    \"limit\": \"22\",\n    \"reviewer\": \"Carlos Rodriguez\"\n  },\n  {\n    \"id\": 23,\n    \"header\": \"Compliance Documentation\",\n    \"type\": \"Legal\",\n    \"status\": \"In Process\",\n    \"target\": \"31\",\n    \"limit\": \"27\",\n    \"reviewer\": \"Sarah Chen\"\n  },\n  {\n    \"id\": 24,\n    \"header\": \"API Documentation\",\n    \"type\": \"Technical content\",\n    \"status\": \"Done\",\n    \"target\": \"8\",\n    \"limit\": \"12\",\n    \"reviewer\": \"Raj Patel\"\n  },\n  {\n    \"id\": 25,\n    \"header\": \"User Interface Mockups\",\n    \"type\": \"Visual\",\n    \"status\": \"In Process\",\n    \"target\": \"19\",\n    \"limit\": \"25\",\n    \"reviewer\": \"Leila Ahmadi\"\n  },\n  {\n    \"id\": 26,\n    \"header\": \"Database Schema\",\n    \"type\": \"Technical content\",\n    \"status\": \"Done\",\n    \"target\": \"22\",\n    \"limit\": \"20\",\n    \"reviewer\": \"Thomas Wilson\"\n  },\n  {\n    \"id\": 27,\n    \"header\": \"Testing Methodology\",\n    \"type\": \"Technical content\",\n    \"status\": \"In Process\",\n    \"target\": \"17\",\n    \"limit\": \"14\",\n    \"reviewer\": \"Assign reviewer\"\n  },\n  {\n    \"id\": 28,\n    \"header\": \"Deployment Strategy\",\n    \"type\": \"Narrative\",\n    \"status\": \"Done\",\n    \"target\": \"26\",\n    \"limit\": \"30\",\n    \"reviewer\": \"Eddie Lake\"\n  },\n  {\n    \"id\": 29,\n    \"header\": \"Budget Breakdown\",\n    \"type\": \"Financial\",\n    \"status\": \"In Process\",\n    \"target\": \"13\",\n    \"limit\": \"16\",\n    \"reviewer\": \"Jamik Tashpulatov\"\n  },\n  {\n    \"id\": 30,\n    \"header\": \"Market Analysis\",\n    \"type\": \"Research\",\n    \"status\": \"Done\",\n    \"target\": \"29\",\n    \"limit\": \"32\",\n    \"reviewer\": \"Sophia Martinez\"\n  },\n  {\n    \"id\": 31,\n    \"header\": \"Competitor Comparison\",\n    \"type\": \"Research\",\n    \"status\": \"In Process\",\n    \"target\": \"21\",\n    \"limit\": \"19\",\n    \"reviewer\": \"Assign reviewer\"\n  },\n  {\n    \"id\": 32,\n    \"header\": \"Maintenance Plan\",\n    \"type\": \"Technical content\",\n    \"status\": \"Done\",\n    \"target\": \"16\",\n    \"limit\": \"23\",\n    \"reviewer\": \"Alex Thompson\"\n  },\n  {\n    \"id\": 33,\n    \"header\": \"User Personas\",\n    \"type\": \"Research\",\n    \"status\": \"In Process\",\n    \"target\": \"27\",\n    \"limit\": \"24\",\n    \"reviewer\": \"Nina Patel\"\n  },\n  {\n    \"id\": 34,\n    \"header\": \"Accessibility Compliance\",\n    \"type\": \"Legal\",\n    \"status\": \"Done\",\n    \"target\": \"18\",\n    \"limit\": \"21\",\n    \"reviewer\": \"Assign reviewer\"\n  },\n  {\n    \"id\": 35,\n    \"header\": \"Performance Metrics\",\n    \"type\": \"Technical content\",\n    \"status\": \"In Process\",\n    \"target\": \"23\",\n    \"limit\": \"26\",\n    \"reviewer\": \"David Kim\"\n  },\n  {\n    \"id\": 36,\n    \"header\": \"Disaster Recovery Plan\",\n    \"type\": \"Technical content\",\n    \"status\": \"Done\",\n    \"target\": \"14\",\n    \"limit\": \"17\",\n    \"reviewer\": \"Jamik Tashpulatov\"\n  },\n  {\n    \"id\": 37,\n    \"header\": \"Third-party Integrations\",\n    \"type\": \"Technical content\",\n    \"status\": \"In Process\",\n    \"target\": \"25\",\n    \"limit\": \"28\",\n    \"reviewer\": \"Eddie Lake\"\n  },\n  {\n    \"id\": 38,\n    \"header\": \"User Feedback Summary\",\n    \"type\": \"Research\",\n    \"status\": \"Done\",\n    \"target\": \"20\",\n    \"limit\": \"15\",\n    \"reviewer\": \"Assign reviewer\"\n  },\n  {\n    \"id\": 39,\n    \"header\": \"Localization Strategy\",\n    \"type\": \"Narrative\",\n    \"status\": \"In Process\",\n    \"target\": \"12\",\n    \"limit\": \"19\",\n    \"reviewer\": \"Maria Garcia\"\n  },\n  {\n    \"id\": 40,\n    \"header\": \"Mobile Compatibility\",\n    \"type\": \"Technical content\",\n    \"status\": \"Done\",\n    \"target\": \"28\",\n    \"limit\": \"31\",\n    \"reviewer\": \"James Wilson\"\n  },\n  {\n    \"id\": 41,\n    \"header\": \"Data Migration Plan\",\n    \"type\": \"Technical content\",\n    \"status\": \"In Process\",\n    \"target\": \"19\",\n    \"limit\": \"22\",\n    \"reviewer\": \"Assign reviewer\"\n  },\n  {\n    \"id\": 42,\n    \"header\": \"Quality Assurance Protocols\",\n    \"type\": \"Technical content\",\n    \"status\": \"Done\",\n    \"target\": \"30\",\n    \"limit\": \"33\",\n    \"reviewer\": \"Priya Singh\"\n  },\n  {\n    \"id\": 43,\n    \"header\": \"Stakeholder Analysis\",\n    \"type\": \"Research\",\n    \"status\": \"In Process\",\n    \"target\": \"11\",\n    \"limit\": \"14\",\n    \"reviewer\": \"Eddie Lake\"\n  },\n  {\n    \"id\": 44,\n    \"header\": \"Environmental Impact Assessment\",\n    \"type\": \"Research\",\n    \"status\": \"Done\",\n    \"target\": \"24\",\n    \"limit\": \"27\",\n    \"reviewer\": \"Assign reviewer\"\n  },\n  {\n    \"id\": 45,\n    \"header\": \"Intellectual Property Rights\",\n    \"type\": \"Legal\",\n    \"status\": \"In Process\",\n    \"target\": \"17\",\n    \"limit\": \"20\",\n    \"reviewer\": \"Sarah Johnson\"\n  },\n  {\n    \"id\": 46,\n    \"header\": \"Customer Support Framework\",\n    \"type\": \"Narrative\",\n    \"status\": \"Done\",\n    \"target\": \"22\",\n    \"limit\": \"25\",\n    \"reviewer\": \"Jamik Tashpulatov\"\n  },\n  {\n    \"id\": 47,\n    \"header\": \"Version Control Strategy\",\n    \"type\": \"Technical content\",\n    \"status\": \"In Process\",\n    \"target\": \"15\",\n    \"limit\": \"18\",\n    \"reviewer\": \"Assign reviewer\"\n  },\n  {\n    \"id\": 48,\n    \"header\": \"Continuous Integration Pipeline\",\n    \"type\": \"Technical content\",\n    \"status\": \"Done\",\n    \"target\": \"26\",\n    \"limit\": \"29\",\n    \"reviewer\": \"Michael Chen\"\n  },\n  {\n    \"id\": 49,\n    \"header\": \"Regulatory Compliance\",\n    \"type\": \"Legal\",\n    \"status\": \"In Process\",\n    \"target\": \"13\",\n    \"limit\": \"16\",\n    \"reviewer\": \"Assign reviewer\"\n  },\n  {\n    \"id\": 50,\n    \"header\": \"User Authentication System\",\n    \"type\": \"Technical content\",\n    \"status\": \"Done\",\n    \"target\": \"28\",\n    \"limit\": \"31\",\n    \"reviewer\": \"Eddie Lake\"\n  },\n  {\n    \"id\": 51,\n    \"header\": \"Data Analytics Framework\",\n    \"type\": \"Technical content\",\n    \"status\": \"In Process\",\n    \"target\": \"21\",\n    \"limit\": \"24\",\n    \"reviewer\": \"Jamik Tashpulatov\"\n  },\n  {\n    \"id\": 52,\n    \"header\": \"Cloud Infrastructure\",\n    \"type\": \"Technical content\",\n    \"status\": \"Done\",\n    \"target\": \"16\",\n    \"limit\": \"19\",\n    \"reviewer\": \"Assign reviewer\"\n  },\n  {\n    \"id\": 53,\n    \"header\": \"Network Security Measures\",\n    \"type\": \"Technical content\",\n    \"status\": \"In Process\",\n    \"target\": \"29\",\n    \"limit\": \"32\",\n    \"reviewer\": \"Lisa Wong\"\n  },\n  {\n    \"id\": 54,\n    \"header\": \"Project Timeline\",\n    \"type\": \"Planning\",\n    \"status\": \"Done\",\n    \"target\": \"14\",\n    \"limit\": \"17\",\n    \"reviewer\": \"Eddie Lake\"\n  },\n  {\n    \"id\": 55,\n    \"header\": \"Resource Allocation\",\n    \"type\": \"Planning\",\n    \"status\": \"In Process\",\n    \"target\": \"27\",\n    \"limit\": \"30\",\n    \"reviewer\": \"Assign reviewer\"\n  },\n  {\n    \"id\": 56,\n    \"header\": \"Team Structure and Roles\",\n    \"type\": \"Planning\",\n    \"status\": \"Done\",\n    \"target\": \"20\",\n    \"limit\": \"23\",\n    \"reviewer\": \"Jamik Tashpulatov\"\n  },\n  {\n    \"id\": 57,\n    \"header\": \"Communication Protocols\",\n    \"type\": \"Planning\",\n    \"status\": \"In Process\",\n    \"target\": \"15\",\n    \"limit\": \"18\",\n    \"reviewer\": \"Assign reviewer\"\n  },\n  {\n    \"id\": 58,\n    \"header\": \"Success Metrics\",\n    \"type\": \"Planning\",\n    \"status\": \"Done\",\n    \"target\": \"30\",\n    \"limit\": \"33\",\n    \"reviewer\": \"Eddie Lake\"\n  },\n  {\n    \"id\": 59,\n    \"header\": \"Internationalization Support\",\n    \"type\": \"Technical content\",\n    \"status\": \"In Process\",\n    \"target\": \"23\",\n    \"limit\": \"26\",\n    \"reviewer\": \"Jamik Tashpulatov\"\n  },\n  {\n    \"id\": 60,\n    \"header\": \"Backup and Recovery Procedures\",\n    \"type\": \"Technical content\",\n    \"status\": \"Done\",\n    \"target\": \"18\",\n    \"limit\": \"21\",\n    \"reviewer\": \"Assign reviewer\"\n  },\n  {\n    \"id\": 61,\n    \"header\": \"Monitoring and Alerting System\",\n    \"type\": \"Technical content\",\n    \"status\": \"In Process\",\n    \"target\": \"25\",\n    \"limit\": \"28\",\n    \"reviewer\": \"Daniel Park\"\n  },\n  {\n    \"id\": 62,\n    \"header\": \"Code Review Guidelines\",\n    \"type\": \"Technical content\",\n    \"status\": \"Done\",\n    \"target\": \"12\",\n    \"limit\": \"15\",\n    \"reviewer\": \"Eddie Lake\"\n  },\n  {\n    \"id\": 63,\n    \"header\": \"Documentation Standards\",\n    \"type\": \"Technical content\",\n    \"status\": \"In Process\",\n    \"target\": \"27\",\n    \"limit\": \"30\",\n    \"reviewer\": \"Jamik Tashpulatov\"\n  },\n  {\n    \"id\": 64,\n    \"header\": \"Release Management Process\",\n    \"type\": \"Planning\",\n    \"status\": \"Done\",\n    \"target\": \"22\",\n    \"limit\": \"25\",\n    \"reviewer\": \"Assign reviewer\"\n  },\n  {\n    \"id\": 65,\n    \"header\": \"Feature Prioritization Matrix\",\n    \"type\": \"Planning\",\n    \"status\": \"In Process\",\n    \"target\": \"19\",\n    \"limit\": \"22\",\n    \"reviewer\": \"Emma Davis\"\n  },\n  {\n    \"id\": 66,\n    \"header\": \"Technical Debt Assessment\",\n    \"type\": \"Technical content\",\n    \"status\": \"Done\",\n    \"target\": \"24\",\n    \"limit\": \"27\",\n    \"reviewer\": \"Eddie Lake\"\n  },\n  {\n    \"id\": 67,\n    \"header\": \"Capacity Planning\",\n    \"type\": \"Planning\",\n    \"status\": \"In Process\",\n    \"target\": \"21\",\n    \"limit\": \"24\",\n    \"reviewer\": \"Jamik Tashpulatov\"\n  },\n  {\n    \"id\": 68,\n    \"header\": \"Service Level Agreements\",\n    \"type\": \"Legal\",\n    \"status\": \"Done\",\n    \"target\": \"26\",\n    \"limit\": \"29\",\n    \"reviewer\": \"Assign reviewer\"\n  }\n]\n"
    },
    {
      "path": "registry/default/blocks/dashboard-01/components/app-sidebar.tsx",
      "type": "registry:component",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport {\n  TbCamera,\n  TbChartBar,\n  TbDashboard,\n  TbDatabase,\n  TbFileAi,\n  TbFileDescription,\n  TbFileWord,\n  TbFolder,\n  TbHelp,\n  TbInnerShadowTop,\n  TbListDetails,\n  TbReport,\n  TbSearch,\n  TbSettings,\n  TbUsers,\n} from \"react-icons/tb\";\nimport { css } from \"styled-system/css\";\nimport { styled } from \"styled-system/jsx\";\nimport { NavDocuments } from \"@/registry/default/blocks/dashboard-01/components/nav-documents\";\nimport { NavMain } from \"@/registry/default/blocks/dashboard-01/components/nav-main\";\nimport { NavSecondary } from \"@/registry/default/blocks/dashboard-01/components/nav-secondary\";\nimport { NavUser } from \"@/registry/default/blocks/dashboard-01/components/nav-user\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarHeader,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n} from \"@/registry/default/ui/sidebar\";\n\nconst data = {\n  user: {\n    name: \"shadcn\",\n    email: \"m@example.com\",\n    avatar: \"https://github.com/shadcn.png\",\n  },\n  navMain: [\n    {\n      title: \"Dashboard\",\n      url: \"#\",\n      icon: TbDashboard,\n    },\n    {\n      title: \"Lifecycle\",\n      url: \"#\",\n      icon: TbListDetails,\n    },\n    {\n      title: \"Analytics\",\n      url: \"#\",\n      icon: TbChartBar,\n    },\n    {\n      title: \"Projects\",\n      url: \"#\",\n      icon: TbFolder,\n    },\n    {\n      title: \"Team\",\n      url: \"#\",\n      icon: TbUsers,\n    },\n  ],\n  navClouds: [\n    {\n      title: \"Capture\",\n      icon: TbCamera,\n      isActive: true,\n      url: \"#\",\n      items: [\n        {\n          title: \"Active Proposals\",\n          url: \"#\",\n        },\n        {\n          title: \"Archived\",\n          url: \"#\",\n        },\n      ],\n    },\n    {\n      title: \"Proposal\",\n      icon: TbFileDescription,\n      url: \"#\",\n      items: [\n        {\n          title: \"Active Proposals\",\n          url: \"#\",\n        },\n        {\n          title: \"Archived\",\n          url: \"#\",\n        },\n      ],\n    },\n    {\n      title: \"Prompts\",\n      icon: TbFileAi,\n      url: \"#\",\n      items: [\n        {\n          title: \"Active Proposals\",\n          url: \"#\",\n        },\n        {\n          title: \"Archived\",\n          url: \"#\",\n        },\n      ],\n    },\n  ],\n  navSecondary: [\n    {\n      title: \"Settings\",\n      url: \"#\",\n      icon: TbSettings,\n    },\n    {\n      title: \"Get Help\",\n      url: \"#\",\n      icon: TbHelp,\n    },\n    {\n      title: \"Search\",\n      url: \"#\",\n      icon: TbSearch,\n    },\n  ],\n  documents: [\n    {\n      name: \"Data Library\",\n      url: \"#\",\n      icon: TbDatabase,\n    },\n    {\n      name: \"Reports\",\n      url: \"#\",\n      icon: TbReport,\n    },\n    {\n      name: \"Word Assistant\",\n      url: \"#\",\n      icon: TbFileWord,\n    },\n  ],\n};\n\nexport function AppSidebar(props: React.ComponentProps<typeof Sidebar>) {\n  return (\n    <Sidebar collapsible=\"offcanvas\" css={{ borderRightWidth: \"0\" }} {...props}>\n      <SidebarHeader>\n        <SidebarMenu>\n          <SidebarMenuItem>\n            <SidebarMenuButton\n              asChild\n              css={{\n                \"& [data-sidebar=menu-button]\": {\n                  p: \"1.5!\",\n                },\n              }}\n            >\n              <a href=\"#\">\n                <TbInnerShadowTop className={css({ w: \"5\", h: \"5\" })} />\n                <styled.span css={{ textStyle: \"md\", fontWeight: \"semibold\" }}>\n                  Acme Inc.\n                </styled.span>\n              </a>\n            </SidebarMenuButton>\n          </SidebarMenuItem>\n        </SidebarMenu>\n      </SidebarHeader>\n      <SidebarContent>\n        <NavMain items={data.navMain} />\n        <NavDocuments items={data.documents} />\n        <NavSecondary items={data.navSecondary} css={{ mt: \"auto\" }} />\n      </SidebarContent>\n      <SidebarFooter>\n        <NavUser user={data.user} />\n      </SidebarFooter>\n    </Sidebar>\n  );\n}\n"
    },
    {
      "path": "registry/default/blocks/dashboard-01/components/chart-area-interactive.tsx",
      "type": "registry:component",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Area, AreaChart, CartesianGrid, XAxis } from \"recharts\";\nimport { styled } from \"styled-system/jsx\";\nimport { useMediaQuery } from \"@/registry/default/hooks/use-media-query\";\nimport {\n  Card,\n  CardAction,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/registry/default/ui/card\";\nimport {\n  ChartConfig,\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n} from \"@/registry/default/ui/chart\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/registry/default/ui/select\";\nimport { ToggleGroup, ToggleGroupItem } from \"@/registry/default/ui/toggle-group\";\n\nexport const description = \"An interactive area chart\";\n\nconst chartData = [\n  { date: \"2024-04-01\", desktop: 222, mobile: 150 },\n  { date: \"2024-04-02\", desktop: 97, mobile: 180 },\n  { date: \"2024-04-03\", desktop: 167, mobile: 120 },\n  { date: \"2024-04-04\", desktop: 242, mobile: 260 },\n  { date: \"2024-04-05\", desktop: 373, mobile: 290 },\n  { date: \"2024-04-06\", desktop: 301, mobile: 340 },\n  { date: \"2024-04-07\", desktop: 245, mobile: 180 },\n  { date: \"2024-04-08\", desktop: 409, mobile: 320 },\n  { date: \"2024-04-09\", desktop: 59, mobile: 110 },\n  { date: \"2024-04-10\", desktop: 261, mobile: 190 },\n  { date: \"2024-04-11\", desktop: 327, mobile: 350 },\n  { date: \"2024-04-12\", desktop: 292, mobile: 210 },\n  { date: \"2024-04-13\", desktop: 342, mobile: 380 },\n  { date: \"2024-04-14\", desktop: 137, mobile: 220 },\n  { date: \"2024-04-15\", desktop: 120, mobile: 170 },\n  { date: \"2024-04-16\", desktop: 138, mobile: 190 },\n  { date: \"2024-04-17\", desktop: 446, mobile: 360 },\n  { date: \"2024-04-18\", desktop: 364, mobile: 410 },\n  { date: \"2024-04-19\", desktop: 243, mobile: 180 },\n  { date: \"2024-04-20\", desktop: 89, mobile: 150 },\n  { date: \"2024-04-21\", desktop: 137, mobile: 200 },\n  { date: \"2024-04-22\", desktop: 224, mobile: 170 },\n  { date: \"2024-04-23\", desktop: 138, mobile: 230 },\n  { date: \"2024-04-24\", desktop: 387, mobile: 290 },\n  { date: \"2024-04-25\", desktop: 215, mobile: 250 },\n  { date: \"2024-04-26\", desktop: 75, mobile: 130 },\n  { date: \"2024-04-27\", desktop: 383, mobile: 420 },\n  { date: \"2024-04-28\", desktop: 122, mobile: 180 },\n  { date: \"2024-04-29\", desktop: 315, mobile: 240 },\n  { date: \"2024-04-30\", desktop: 454, mobile: 380 },\n  { date: \"2024-05-01\", desktop: 165, mobile: 220 },\n  { date: \"2024-05-02\", desktop: 293, mobile: 310 },\n  { date: \"2024-05-03\", desktop: 247, mobile: 190 },\n  { date: \"2024-05-04\", desktop: 385, mobile: 420 },\n  { date: \"2024-05-05\", desktop: 481, mobile: 390 },\n  { date: \"2024-05-06\", desktop: 498, mobile: 520 },\n  { date: \"2024-05-07\", desktop: 388, mobile: 300 },\n  { date: \"2024-05-08\", desktop: 149, mobile: 210 },\n  { date: \"2024-05-09\", desktop: 227, mobile: 180 },\n  { date: \"2024-05-10\", desktop: 293, mobile: 330 },\n  { date: \"2024-05-11\", desktop: 335, mobile: 270 },\n  { date: \"2024-05-12\", desktop: 197, mobile: 240 },\n  { date: \"2024-05-13\", desktop: 197, mobile: 160 },\n  { date: \"2024-05-14\", desktop: 448, mobile: 490 },\n  { date: \"2024-05-15\", desktop: 473, mobile: 380 },\n  { date: \"2024-05-16\", desktop: 338, mobile: 400 },\n  { date: \"2024-05-17\", desktop: 499, mobile: 420 },\n  { date: \"2024-05-18\", desktop: 315, mobile: 350 },\n  { date: \"2024-05-19\", desktop: 235, mobile: 180 },\n  { date: \"2024-05-20\", desktop: 177, mobile: 230 },\n  { date: \"2024-05-21\", desktop: 82, mobile: 140 },\n  { date: \"2024-05-22\", desktop: 81, mobile: 120 },\n  { date: \"2024-05-23\", desktop: 252, mobile: 290 },\n  { date: \"2024-05-24\", desktop: 294, mobile: 220 },\n  { date: \"2024-05-25\", desktop: 201, mobile: 250 },\n  { date: \"2024-05-26\", desktop: 213, mobile: 170 },\n  { date: \"2024-05-27\", desktop: 420, mobile: 460 },\n  { date: \"2024-05-28\", desktop: 233, mobile: 190 },\n  { date: \"2024-05-29\", desktop: 78, mobile: 130 },\n  { date: \"2024-05-30\", desktop: 340, mobile: 280 },\n  { date: \"2024-05-31\", desktop: 178, mobile: 230 },\n  { date: \"2024-06-01\", desktop: 178, mobile: 200 },\n  { date: \"2024-06-02\", desktop: 470, mobile: 410 },\n  { date: \"2024-06-03\", desktop: 103, mobile: 160 },\n  { date: \"2024-06-04\", desktop: 439, mobile: 380 },\n  { date: \"2024-06-05\", desktop: 88, mobile: 140 },\n  { date: \"2024-06-06\", desktop: 294, mobile: 250 },\n  { date: \"2024-06-07\", desktop: 323, mobile: 370 },\n  { date: \"2024-06-08\", desktop: 385, mobile: 320 },\n  { date: \"2024-06-09\", desktop: 438, mobile: 480 },\n  { date: \"2024-06-10\", desktop: 155, mobile: 200 },\n  { date: \"2024-06-11\", desktop: 92, mobile: 150 },\n  { date: \"2024-06-12\", desktop: 492, mobile: 420 },\n  { date: \"2024-06-13\", desktop: 81, mobile: 130 },\n  { date: \"2024-06-14\", desktop: 426, mobile: 380 },\n  { date: \"2024-06-15\", desktop: 307, mobile: 350 },\n  { date: \"2024-06-16\", desktop: 371, mobile: 310 },\n  { date: \"2024-06-17\", desktop: 475, mobile: 520 },\n  { date: \"2024-06-18\", desktop: 107, mobile: 170 },\n  { date: \"2024-06-19\", desktop: 341, mobile: 290 },\n  { date: \"2024-06-20\", desktop: 408, mobile: 450 },\n  { date: \"2024-06-21\", desktop: 169, mobile: 210 },\n  { date: \"2024-06-22\", desktop: 317, mobile: 270 },\n  { date: \"2024-06-23\", desktop: 480, mobile: 530 },\n  { date: \"2024-06-24\", desktop: 132, mobile: 180 },\n  { date: \"2024-06-25\", desktop: 141, mobile: 190 },\n  { date: \"2024-06-26\", desktop: 434, mobile: 380 },\n  { date: \"2024-06-27\", desktop: 448, mobile: 490 },\n  { date: \"2024-06-28\", desktop: 149, mobile: 200 },\n  { date: \"2024-06-29\", desktop: 103, mobile: 160 },\n  { date: \"2024-06-30\", desktop: 446, mobile: 400 },\n];\n\nconst chartConfig = {\n  visitors: {\n    label: \"Visitors\",\n  },\n  desktop: {\n    label: \"Desktop\",\n    color: \"var(--colors-primary)\",\n  },\n  mobile: {\n    label: \"Mobile\",\n    color: \"var(--colors-primary)\",\n  },\n} satisfies ChartConfig;\n\nexport function ChartAreaInteractive() {\n  const isMobile = useMediaQuery(\"(max-width: 767px)\");\n  const [timeRange, setTimeRange] = React.useState(\"90d\");\n\n  React.useEffect(() => {\n    if (isMobile) {\n      setTimeRange(\"7d\");\n    }\n  }, [isMobile]);\n\n  const filteredData = chartData.filter((item) => {\n    const date = new Date(item.date);\n    const referenceDate = new Date(\"2024-06-30\");\n    let daysToSubtract = 90;\n    if (timeRange === \"30d\") {\n      daysToSubtract = 30;\n    } else if (timeRange === \"7d\") {\n      daysToSubtract = 7;\n    }\n    const startDate = new Date(referenceDate);\n    startDate.setDate(startDate.getDate() - daysToSubtract);\n    return date >= startDate;\n  });\n\n  return (\n    <Card css={{ containerName: \"card\", containerType: \"inline-size\" }}>\n      <CardHeader>\n        <CardTitle>Total Visitors</CardTitle>\n        <CardDescription>\n          <styled.span\n            css={{\n              display: \"none\",\n              \"@container card (min-width: 540px)\": {\n                display: \"block\",\n              },\n            }}\n          >\n            Total for the last 3 months\n          </styled.span>\n          <styled.span\n            css={{\n              \"@container card (min-width: 540px)\": { display: \"none\" },\n            }}\n          >\n            Last 3 months\n          </styled.span>\n        </CardDescription>\n        <CardAction>\n          <ToggleGroup\n            type=\"single\"\n            value={timeRange}\n            onValueChange={setTimeRange}\n            variant=\"outline\"\n            css={{\n              display: \"none\",\n              \"& > .toggle-group__item\": {\n                px: \"4!\",\n              },\n              \"@container card (min-width: 767px)\": {\n                display: \"flex\",\n              },\n            }}\n          >\n            <ToggleGroupItem value=\"90d\">Last 3 months</ToggleGroupItem>\n            <ToggleGroupItem value=\"30d\">Last 30 days</ToggleGroupItem>\n            <ToggleGroupItem value=\"7d\">Last 7 days</ToggleGroupItem>\n          </ToggleGroup>\n          <Select value={timeRange} onValueChange={setTimeRange}>\n            <SelectTrigger\n              css={{\n                display: \"flex\",\n                w: \"40\",\n                \"& > [data-slot=select-value]\": { display: \"block\", truncate: true },\n                \"@container card (min-width: 767px)\": { display: \"none\" },\n              }}\n              size=\"sm\"\n              aria-label=\"Select a value\"\n            >\n              <SelectValue placeholder=\"Last 3 months\" />\n            </SelectTrigger>\n            <SelectContent css={{ rounded: \"xl\" }}>\n              <SelectItem value=\"90d\" css={{ rounded: \"lg\" }}>\n                Last 3 months\n              </SelectItem>\n              <SelectItem value=\"30d\" css={{ rounded: \"lg\" }}>\n                Last 30 days\n              </SelectItem>\n              <SelectItem value=\"7d\" css={{ rounded: \"lg\" }}>\n                Last 7 days\n              </SelectItem>\n            </SelectContent>\n          </Select>\n        </CardAction>\n      </CardHeader>\n      <CardContent css={{ px: \"2\", pt: \"4\", sm: { px: \"6\", pt: \"6\" } }}>\n        <ChartContainer config={chartConfig} css={{ aspectRatio: \"auto\", h: \"250px\", w: \"full\" }}>\n          <AreaChart data={filteredData}>\n            <defs>\n              <linearGradient id=\"fillDesktop\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                <stop offset=\"5%\" stopColor=\"var(--color-desktop)\" stopOpacity={1.0} />\n                <stop offset=\"95%\" stopColor=\"var(--color-desktop)\" stopOpacity={0.1} />\n              </linearGradient>\n              <linearGradient id=\"fillMobile\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                <stop offset=\"5%\" stopColor=\"var(--color-mobile)\" stopOpacity={0.8} />\n                <stop offset=\"95%\" stopColor=\"var(--color-mobile)\" stopOpacity={0.1} />\n              </linearGradient>\n            </defs>\n            <CartesianGrid vertical={false} />\n            <XAxis\n              dataKey=\"date\"\n              tickLine={false}\n              axisLine={false}\n              tickMargin={8}\n              minTickGap={32}\n              tickFormatter={(value) => {\n                const date = new Date(value);\n                return date.toLocaleDateString(\"en-US\", {\n                  month: \"short\",\n                  day: \"numeric\",\n                });\n              }}\n            />\n            <ChartTooltip\n              cursor={false}\n              content={\n                <ChartTooltipContent\n                  labelFormatter={(value) => {\n                    return new Date(value).toLocaleDateString(\"en-US\", {\n                      month: \"short\",\n                      day: \"numeric\",\n                    });\n                  }}\n                  indicator=\"dot\"\n                />\n              }\n            />\n            <Area\n              dataKey=\"mobile\"\n              type=\"natural\"\n              fill=\"url(#fillMobile)\"\n              stroke=\"var(--color-mobile)\"\n              stackId=\"a\"\n            />\n            <Area\n              dataKey=\"desktop\"\n              type=\"natural\"\n              fill=\"url(#fillDesktop)\"\n              stroke=\"var(--color-desktop)\"\n              stackId=\"a\"\n            />\n          </AreaChart>\n        </ChartContainer>\n      </CardContent>\n    </Card>\n  );\n}\n"
    },
    {
      "path": "registry/default/blocks/dashboard-01/components/data-table.tsx",
      "type": "registry:component",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport {\n  TbChevronDown,\n  TbChevronLeft,\n  TbChevronRight,\n  TbChevronsLeft,\n  TbChevronsRight,\n  TbCircleCheckFilled,\n  TbDotsVertical,\n  TbGripVertical,\n  TbLayoutColumns,\n  TbLoader,\n  TbPlus,\n  TbTrendingUp,\n} from \"react-icons/tb\";\nimport {\n  closestCenter,\n  DndContext,\n  KeyboardSensor,\n  MouseSensor,\n  TouchSensor,\n  useSensor,\n  useSensors,\n  type DragEndEvent,\n  type UniqueIdentifier,\n} from \"@dnd-kit/core\";\nimport { restrictToVerticalAxis } from \"@dnd-kit/modifiers\";\nimport {\n  arrayMove,\n  SortableContext,\n  useSortable,\n  verticalListSortingStrategy,\n} from \"@dnd-kit/sortable\";\nimport { CSS } from \"@dnd-kit/utilities\";\nimport {\n  ColumnDef,\n  ColumnFiltersState,\n  flexRender,\n  getCoreRowModel,\n  getFacetedRowModel,\n  getFacetedUniqueValues,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  Row,\n  SortingState,\n  useReactTable,\n  VisibilityState,\n} from \"@tanstack/react-table\";\nimport { Area, AreaChart, CartesianGrid, XAxis } from \"recharts\";\nimport { toast } from \"sonner\";\nimport { css } from \"styled-system/css\";\nimport { styled } from \"styled-system/jsx\";\nimport { z } from \"zod\";\nimport { useMediaQuery } from \"@/registry/default/hooks/use-media-query\";\nimport { Badge } from \"@/registry/default/ui/badge\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport {\n  ChartConfig,\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n} from \"@/registry/default/ui/chart\";\nimport { Checkbox } from \"@/registry/default/ui/checkbox\";\nimport {\n  Drawer,\n  DrawerClose,\n  DrawerContent,\n  DrawerDescription,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerTrigger,\n} from \"@/registry/default/ui/drawer\";\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/registry/default/ui/dropdown-menu\";\nimport { Input } from \"@/registry/default/ui/input\";\nimport { Label } from \"@/registry/default/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/registry/default/ui/select\";\nimport { Separator } from \"@/registry/default/ui/separator\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/registry/default/ui/table\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/registry/default/ui/tabs\";\n\nexport const schema = z.object({\n  id: z.number(),\n  header: z.string(),\n  type: z.string(),\n  status: z.string(),\n  target: z.string(),\n  limit: z.string(),\n  reviewer: z.string(),\n});\n\n// Create a separate component for the drag handle\nfunction DragHandle({ id }: { id: number }) {\n  const { attributes, listeners } = useSortable({\n    id,\n  });\n\n  return (\n    <Button\n      {...attributes}\n      {...listeners}\n      variant=\"ghost\"\n      size=\"icon\"\n      css={{ color: \"muted.fg\", w: \"7\", h: \"7\", _hover: { bg: \"transparent\" } }}\n    >\n      <TbGripVertical className={css({ color: \"muted.fg\", w: \"3\", h: \"3\" })} />\n      <styled.span css={{ srOnly: true }}>Drag to reorder</styled.span>\n    </Button>\n  );\n}\n\nconst columns: ColumnDef<z.infer<typeof schema>>[] = [\n  {\n    id: \"drag\",\n    header: () => null,\n    cell: ({ row }) => <DragHandle id={row.original.id} />,\n  },\n  {\n    id: \"select\",\n    header: ({ table }) => (\n      <styled.div css={{ display: \"flex\", alignItems: \"center\", justifyContent: \"center\" }}>\n        <Checkbox\n          checked={\n            table.getIsAllPageRowsSelected() ||\n            (table.getIsSomePageRowsSelected() && \"indeterminate\")\n          }\n          onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n          aria-label=\"Select all\"\n        />\n      </styled.div>\n    ),\n    cell: ({ row }) => (\n      <styled.div css={{ display: \"flex\", alignItems: \"center\", justifyContent: \"center\" }}>\n        <Checkbox\n          checked={row.getIsSelected()}\n          onCheckedChange={(value) => row.toggleSelected(!!value)}\n          aria-label=\"Select row\"\n        />\n      </styled.div>\n    ),\n    enableSorting: false,\n    enableHiding: false,\n  },\n  {\n    accessorKey: \"header\",\n    header: \"Header\",\n    cell: ({ row }) => {\n      return <TableCellViewer item={row.original} />;\n    },\n    enableHiding: false,\n  },\n  {\n    accessorKey: \"type\",\n    header: \"Section Type\",\n    cell: ({ row }) => (\n      <styled.div css={{ w: \"32\" }}>\n        <Badge variant=\"outline\" css={{ color: \"muted.fg\", px: \"1.5\" }}>\n          {row.original.type}\n        </Badge>\n      </styled.div>\n    ),\n  },\n  {\n    accessorKey: \"status\",\n    header: \"Status\",\n    cell: ({ row }) => (\n      <Badge variant=\"outline\" css={{ color: \"muted.fg\", px: \"1.5\" }}>\n        {row.original.status === \"Done\" ? (\n          <TbCircleCheckFilled\n            className={css({ fill: \"green.500\", _dark: { fill: \"green.400\" } })}\n          />\n        ) : (\n          <TbLoader />\n        )}\n        {row.original.status}\n      </Badge>\n    ),\n  },\n  {\n    accessorKey: \"target\",\n    header: () => <styled.div css={{ w: \"full\", textAlign: \"right\" }}>Target</styled.div>,\n    cell: ({ row }) => (\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          toast.promise(new Promise((resolve) => setTimeout(resolve, 1000)), {\n            loading: `Saving ${row.original.header}`,\n            success: \"Done\",\n            error: \"Error\",\n          });\n        }}\n      >\n        <Label htmlFor={`${row.original.id}-target`} css={{ srOnly: true }}>\n          Target\n        </Label>\n        <Input\n          css={{\n            w: \"16\",\n            h: \"8\",\n            bg: \"transparent\",\n            borderColor: \"transparent\",\n            textAlign: \"right\",\n            shadow: \"none\",\n            _hover: {\n              bg: \"input/30\",\n              _dark: { bg: \"input/30\" },\n            },\n            _focusVisible: {\n              bg: \"bg\",\n              borderWidth: \"1px\",\n              _dark: { bg: \"input/30\" },\n            },\n            _dark: { bg: \"transparent\" },\n          }}\n          defaultValue={row.original.target}\n          id={`${row.original.id}-target`}\n        />\n      </form>\n    ),\n  },\n  {\n    accessorKey: \"limit\",\n    header: () => <styled.div css={{ w: \"full\", textAlign: \"right\" }}>Limit</styled.div>,\n    cell: ({ row }) => (\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          toast.promise(new Promise((resolve) => setTimeout(resolve, 1000)), {\n            loading: `Saving ${row.original.header}`,\n            success: \"Done\",\n            error: \"Error\",\n          });\n        }}\n      >\n        <Label htmlFor={`${row.original.id}-limit`} css={{ srOnly: true }}>\n          Limit\n        </Label>\n        <Input\n          css={{\n            w: \"16\",\n            h: \"8\",\n            bg: \"transparent\",\n            borderColor: \"transparent\",\n            textAlign: \"right\",\n            shadow: \"none\",\n            _hover: {\n              bg: \"input/30\",\n              _dark: { bg: \"input/30\" },\n            },\n            _focusVisible: {\n              bg: \"bg\",\n              borderWidth: \"1px\",\n              _dark: { bg: \"input/30\" },\n            },\n            _dark: { bg: \"transparent\" },\n          }}\n          defaultValue={row.original.limit}\n          id={`${row.original.id}-limit`}\n        />\n      </form>\n    ),\n  },\n  {\n    accessorKey: \"reviewer\",\n    header: \"Reviewer\",\n    cell: ({ row }) => {\n      const isAssigned = row.original.reviewer !== \"Assign reviewer\";\n\n      if (isAssigned) {\n        return row.original.reviewer;\n      }\n\n      return (\n        <>\n          <Label htmlFor={`${row.original.id}-reviewer`} css={{ srOnly: true }}>\n            Reviewer\n          </Label>\n          <Select>\n            <SelectTrigger\n              css={{ w: \"9.5rem\", \"& .select__value\": { display: \"block\", truncate: true } }}\n              size=\"sm\"\n              id={`${row.original.id}-reviewer`}\n            >\n              <SelectValue placeholder=\"Assign reviewer\" />\n            </SelectTrigger>\n            <SelectContent align=\"end\">\n              <SelectItem value=\"Eddie Lake\">Eddie Lake</SelectItem>\n              <SelectItem value=\"Jamik Tashpulatov\">Jamik Tashpulatov</SelectItem>\n            </SelectContent>\n          </Select>\n        </>\n      );\n    },\n  },\n  {\n    id: \"actions\",\n    cell: () => (\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button\n            variant=\"ghost\"\n            css={{ color: \"muted.fg\", display: \"flex\", w: \"8\", h: \"8\", _open: { bg: \"muted\" } }}\n            size=\"icon\"\n          >\n            <TbDotsVertical />\n            <styled.span css={{ srOnly: true }}>Open menu</styled.span>\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"end\" css={{ w: \"32\" }}>\n          <DropdownMenuItem>Edit</DropdownMenuItem>\n          <DropdownMenuItem>Make a copy</DropdownMenuItem>\n          <DropdownMenuItem>Favorite</DropdownMenuItem>\n          <DropdownMenuSeparator />\n          <DropdownMenuItem variant=\"danger\">Delete</DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    ),\n  },\n];\n\nfunction DraggableRow({ row }: { row: Row<z.infer<typeof schema>> }) {\n  const { transform, transition, setNodeRef, isDragging } = useSortable({\n    id: row.original.id,\n  });\n\n  return (\n    <TableRow\n      data-state={row.getIsSelected() && \"selected\"}\n      data-dragging={isDragging}\n      ref={setNodeRef}\n      css={{\n        pos: \"relative\",\n        zIndex: \"0\",\n        \"&[data-dragging=true]\": { zIndex: \"10\", opacity: \"0.8\" },\n      }}\n      style={{\n        transform: CSS.Transform.toString(transform),\n        transition: transition,\n      }}\n    >\n      {row.getVisibleCells().map((cell) => (\n        <TableCell key={cell.id}>\n          {flexRender(cell.column.columnDef.cell, cell.getContext())}\n        </TableCell>\n      ))}\n    </TableRow>\n  );\n}\n\nexport function DataTable({ data: initialData }: { data: z.infer<typeof schema>[] }) {\n  const [data, setData] = React.useState(() => initialData);\n  const [rowSelection, setRowSelection] = React.useState({});\n  const [columnVisibility, setColumnVisibility] = React.useState<VisibilityState>({});\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([]);\n  const [sorting, setSorting] = React.useState<SortingState>([]);\n  const [pagination, setPagination] = React.useState({\n    pageIndex: 0,\n    pageSize: 10,\n  });\n  const sortableId = React.useId();\n  const sensors = useSensors(\n    useSensor(MouseSensor, {}),\n    useSensor(TouchSensor, {}),\n    useSensor(KeyboardSensor, {})\n  );\n\n  const dataIds = React.useMemo<UniqueIdentifier[]>(() => data?.map(({ id }) => id) || [], [data]);\n\n  const table = useReactTable({\n    data,\n    columns,\n    state: {\n      sorting,\n      columnVisibility,\n      rowSelection,\n      columnFilters,\n      pagination,\n    },\n    getRowId: (row) => row.id.toString(),\n    enableRowSelection: true,\n    onRowSelectionChange: setRowSelection,\n    onSortingChange: setSorting,\n    onColumnFiltersChange: setColumnFilters,\n    onColumnVisibilityChange: setColumnVisibility,\n    onPaginationChange: setPagination,\n    getCoreRowModel: getCoreRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFacetedRowModel: getFacetedRowModel(),\n    getFacetedUniqueValues: getFacetedUniqueValues(),\n  });\n\n  function handleDragEnd(event: DragEndEvent) {\n    const { active, over } = event;\n    if (active && over && active.id !== over.id) {\n      setData((data) => {\n        const oldIndex = dataIds.indexOf(active.id);\n        const newIndex = dataIds.indexOf(over.id);\n        return arrayMove(data, oldIndex, newIndex);\n      });\n    }\n  }\n\n  return (\n    <Tabs\n      defaultValue=\"outline\"\n      css={{\n        w: \"full\",\n        display: \"flex\",\n        flexDir: \"column\",\n        justifyContent: \"flex-start\",\n        gap: \"6\",\n      }}\n    >\n      <styled.div\n        css={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"space-between\",\n          px: \"4\",\n          lg: { px: \"6\" },\n        }}\n      >\n        <Label htmlFor=\"view-selector\" css={{ srOnly: true }}>\n          View\n        </Label>\n        <Select defaultValue=\"outline\">\n          <SelectTrigger\n            css={{\n              display: \"flex\",\n              w: \"fit\",\n              \"@container main (width >= 56rem)\": { display: \"none\" },\n            }}\n            size=\"sm\"\n            id=\"view-selector\"\n          >\n            <SelectValue placeholder=\"Select a view\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"outline\">Outline</SelectItem>\n            <SelectItem value=\"past-performance\">Past Performance</SelectItem>\n            <SelectItem value=\"key-personnel\">Key Personnel</SelectItem>\n            <SelectItem value=\"focus-documents\">Focus Documents</SelectItem>\n          </SelectContent>\n        </Select>\n        <TabsList\n          css={{\n            display: \"none\",\n            borderBottomWidth: \"0\",\n            \"& .badge\": {\n              w: \"5\",\n              h: \"5\",\n              rounded: \"full\",\n              px: \"1\",\n            },\n            \"@container main (width >= 56rem)\": { display: \"flex\" },\n          }}\n        >\n          <TabsTrigger value=\"outline\">Outline</TabsTrigger>\n          <TabsTrigger value=\"past-performance\">\n            Past Performance <Badge variant=\"secondary\">3</Badge>\n          </TabsTrigger>\n          <TabsTrigger value=\"key-personnel\">\n            Key Personnel <Badge variant=\"secondary\">2</Badge>\n          </TabsTrigger>\n          <TabsTrigger value=\"focus-documents\">Focus Documents</TabsTrigger>\n        </TabsList>\n        <styled.div css={{ display: \"flex\", alignItems: \"center\", gap: \"2\" }}>\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"outline\" size=\"sm\">\n                <TbLayoutColumns />\n                <styled.span css={{ display: \"none\", lg: { display: \"inline\" } }}>\n                  Customize Columns\n                </styled.span>\n                <styled.span css={{ lg: { display: \"none\" } }}>Columns</styled.span>\n                <TbChevronDown />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\" css={{ w: \"56\" }}>\n              {table\n                .getAllColumns()\n                .filter((column) => typeof column.accessorFn !== \"undefined\" && column.getCanHide())\n                .map((column) => {\n                  return (\n                    <DropdownMenuCheckboxItem\n                      key={column.id}\n                      css={{ textTransform: \"capitalize\" }}\n                      checked={column.getIsVisible()}\n                      onCheckedChange={(value) => column.toggleVisibility(!!value)}\n                    >\n                      {column.id}\n                    </DropdownMenuCheckboxItem>\n                  );\n                })}\n            </DropdownMenuContent>\n          </DropdownMenu>\n          <Button variant=\"outline\" size=\"sm\">\n            <TbPlus />\n            <styled.span css={{ display: \"none\", lg: { display: \"inline\" } }}>\n              Add Section\n            </styled.span>\n          </Button>\n        </styled.div>\n      </styled.div>\n      <TabsContent\n        value=\"outline\"\n        css={{\n          pos: \"relative\",\n          display: \"flex\",\n          flexDir: \"column\",\n          gap: \"4\",\n          overflow: \"auto\",\n          px: \"4\",\n          lg: { px: \"6\" },\n        }}\n      >\n        <styled.div css={{ overflow: \"hidden\", rounded: \"lg\", borderWidth: \"1px\" }}>\n          <DndContext\n            collisionDetection={closestCenter}\n            modifiers={[restrictToVerticalAxis]}\n            onDragEnd={handleDragEnd}\n            sensors={sensors}\n            id={sortableId}\n          >\n            <Table>\n              <TableHeader css={{ bg: \"muted/25\", pos: \"sticky\", top: \"0\", zIndex: \"10\" }}>\n                {table.getHeaderGroups().map((headerGroup) => (\n                  <TableRow key={headerGroup.id}>\n                    {headerGroup.headers.map((header) => {\n                      return (\n                        <TableHead key={header.id} colSpan={header.colSpan}>\n                          {header.isPlaceholder\n                            ? null\n                            : flexRender(header.column.columnDef.header, header.getContext())}\n                        </TableHead>\n                      );\n                    })}\n                  </TableRow>\n                ))}\n              </TableHeader>\n              <TableBody css={{ \"& .table__cell:first\": { w: \"8\" } }}>\n                {table.getRowModel().rows?.length ? (\n                  <SortableContext items={dataIds} strategy={verticalListSortingStrategy}>\n                    {table.getRowModel().rows.map((row) => (\n                      <DraggableRow key={row.id} row={row} />\n                    ))}\n                  </SortableContext>\n                ) : (\n                  <TableRow>\n                    <TableCell colSpan={columns.length} css={{ h: \"24\", textAlign: \"center\" }}>\n                      No results.\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </DndContext>\n        </styled.div>\n        <styled.div\n          css={{ display: \"flex\", alignItems: \"center\", justifyContent: \"space-between\", px: \"4\" }}\n        >\n          <styled.div\n            css={{\n              color: \"muted.fg\",\n              display: \"none\",\n              flex: \"1\",\n              textStyle: \"sm\",\n              lg: { display: \"flex\" },\n            }}\n          >\n            {table.getFilteredSelectedRowModel().rows.length} of{\" \"}\n            {table.getFilteredRowModel().rows.length} row(s) selected.\n          </styled.div>\n          <styled.div\n            css={{ display: \"flex\", w: \"full\", alignItems: \"center\", gap: \"8\", lg: { w: \"fit\" } }}\n          >\n            <styled.div\n              css={{ display: \"none\", alignItems: \"center\", gap: \"2\", lg: { display: \"flex\" } }}\n            >\n              <Label htmlFor=\"rows-per-page\" css={{ textStyle: \"sm\", fontWeight: \"medium\" }}>\n                Rows per page\n              </Label>\n              <Select\n                value={`${table.getState().pagination.pageSize}`}\n                onValueChange={(value) => {\n                  table.setPageSize(Number(value));\n                }}\n              >\n                <SelectTrigger size=\"sm\" css={{ w: \"20\" }} id=\"rows-per-page\">\n                  <SelectValue placeholder={table.getState().pagination.pageSize} />\n                </SelectTrigger>\n                <SelectContent side=\"top\">\n                  {[10, 20, 30, 40, 50].map((pageSize) => (\n                    <SelectItem key={pageSize} value={`${pageSize}`}>\n                      {pageSize}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </styled.div>\n            <styled.div\n              css={{\n                display: \"flex\",\n                w: \"fit\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n                textStyle: \"sm\",\n                fontWeight: \"medium\",\n              }}\n            >\n              Page {table.getState().pagination.pageIndex + 1} of {table.getPageCount()}\n            </styled.div>\n            <styled.div\n              css={{ ml: \"auto\", display: \"flex\", alignItems: \"center\", gap: \"2\", lg: { ml: \"0\" } }}\n            >\n              <Button\n                variant=\"outline\"\n                css={{ display: \"none\", h: \"8\", w: \"8\", p: \"0\", lg: { display: \"flex\" } }}\n                onClick={() => table.setPageIndex(0)}\n                disabled={!table.getCanPreviousPage()}\n              >\n                <styled.span css={{ srOnly: true }}>Go to first page</styled.span>\n                <TbChevronsLeft />\n              </Button>\n              <Button\n                variant=\"outline\"\n                css={{ w: \"8\", h: \"8\" }}\n                size=\"icon\"\n                onClick={() => table.previousPage()}\n                disabled={!table.getCanPreviousPage()}\n              >\n                <styled.span css={{ srOnly: true }}>Go to previous page</styled.span>\n                <TbChevronLeft />\n              </Button>\n              <Button\n                variant=\"outline\"\n                css={{ w: \"8\", h: \"8\" }}\n                size=\"icon\"\n                onClick={() => table.nextPage()}\n                disabled={!table.getCanNextPage()}\n              >\n                <styled.span css={{ srOnly: true }}>Go to next page</styled.span>\n                <TbChevronRight />\n              </Button>\n              <Button\n                variant=\"outline\"\n                css={{ display: \"none\", h: \"8\", w: \"8\", lg: { display: \"flex\" } }}\n                size=\"icon\"\n                onClick={() => table.setPageIndex(table.getPageCount() - 1)}\n                disabled={!table.getCanNextPage()}\n              >\n                <styled.span css={{ srOnly: true }}>Go to last page</styled.span>\n                <TbChevronsRight />\n              </Button>\n            </styled.div>\n          </styled.div>\n        </styled.div>\n      </TabsContent>\n      <TabsContent\n        value=\"past-performance\"\n        css={{ display: \"flex\", flexDir: \"column\", px: \"4\", lg: { px: \"6\" } }}\n      >\n        <styled.div\n          css={{\n            aspectRatio: \"16/9\",\n            w: \"full\",\n            flex: \"1\",\n            rounded: \"lg\",\n            borderWidth: \"1px\",\n            borderStyle: \"dashed\",\n          }}\n        ></styled.div>\n      </TabsContent>\n      <TabsContent\n        value=\"key-personnel\"\n        css={{ display: \"flex\", flexDir: \"column\", px: \"4\", lg: { px: \"6\" } }}\n      >\n        <styled.div\n          css={{\n            aspectRatio: \"16/9\",\n            w: \"full\",\n            flex: \"1\",\n            rounded: \"lg\",\n            borderWidth: \"1px\",\n            borderStyle: \"dashed\",\n          }}\n        ></styled.div>\n      </TabsContent>\n      <TabsContent\n        value=\"focus-documents\"\n        css={{ display: \"flex\", flexDir: \"column\", px: \"4\", lg: { px: \"6\" } }}\n      >\n        <styled.div\n          css={{\n            aspectRatio: \"16/9\",\n            w: \"full\",\n            flex: \"1\",\n            rounded: \"lg\",\n            borderWidth: \"1px\",\n            borderStyle: \"dashed\",\n          }}\n        ></styled.div>\n      </TabsContent>\n    </Tabs>\n  );\n}\n\nconst chartData = [\n  { month: \"January\", desktop: 186, mobile: 80 },\n  { month: \"February\", desktop: 305, mobile: 200 },\n  { month: \"March\", desktop: 237, mobile: 120 },\n  { month: \"April\", desktop: 73, mobile: 190 },\n  { month: \"May\", desktop: 209, mobile: 130 },\n  { month: \"June\", desktop: 214, mobile: 140 },\n];\n\nconst chartConfig = {\n  desktop: {\n    label: \"Desktop\",\n    color: \"var(--primary)\",\n  },\n  mobile: {\n    label: \"Mobile\",\n    color: \"var(--primary)\",\n  },\n} satisfies ChartConfig;\n\nfunction TableCellViewer({ item }: { item: z.infer<typeof schema> }) {\n  const isMobile = useMediaQuery(\"(max-width: 767px)\");\n\n  return (\n    <Drawer direction={isMobile ? \"bottom\" : \"right\"}>\n      <DrawerTrigger asChild>\n        <Button variant=\"link\" css={{ color: \"fg\", w: \"fit\", px: \"0\", textAlign: \"left\" }}>\n          {item.header}\n        </Button>\n      </DrawerTrigger>\n      <DrawerContent>\n        <DrawerHeader css={{ gap: \"1\" }}>\n          <DrawerTitle>{item.header}</DrawerTitle>\n          <DrawerDescription>Showing total visitors for the last 6 months</DrawerDescription>\n        </DrawerHeader>\n        <styled.div\n          css={{\n            display: \"flex\",\n            flexDir: \"column\",\n            gap: \"4\",\n            overflowY: \"auto\",\n            px: \"4\",\n            textStyle: \"sm\",\n          }}\n        >\n          {!isMobile && (\n            <>\n              <ChartContainer config={chartConfig}>\n                <AreaChart\n                  accessibilityLayer\n                  data={chartData}\n                  margin={{\n                    left: 0,\n                    right: 10,\n                  }}\n                >\n                  <CartesianGrid vertical={false} />\n                  <XAxis\n                    dataKey=\"month\"\n                    tickLine={false}\n                    axisLine={false}\n                    tickMargin={8}\n                    tickFormatter={(value) => value.slice(0, 3)}\n                    hide\n                  />\n                  <ChartTooltip cursor={false} content={<ChartTooltipContent indicator=\"dot\" />} />\n                  <Area\n                    dataKey=\"mobile\"\n                    type=\"natural\"\n                    fill=\"var(--color-mobile)\"\n                    fillOpacity={0.6}\n                    stroke=\"var(--color-mobile)\"\n                    stackId=\"a\"\n                  />\n                  <Area\n                    dataKey=\"desktop\"\n                    type=\"natural\"\n                    fill=\"var(--color-desktop)\"\n                    fillOpacity={0.4}\n                    stroke=\"var(--color-desktop)\"\n                    stackId=\"a\"\n                  />\n                </AreaChart>\n              </ChartContainer>\n              <Separator />\n              <styled.div css={{ display: \"grid\", gap: \"2\" }}>\n                <styled.div\n                  css={{ display: \"flex\", gap: \"2\", lineHeight: \"none\", fontWeight: \"medium\" }}\n                >\n                  Trending up by 5.2% this month{\" \"}\n                  <TbTrendingUp className={css({ w: \"4\", h: \"4\" })} />\n                </styled.div>\n                <styled.div css={{ color: \"muted.fg\" }}>\n                  Showing total visitors for the last 6 months. This is just some random text to\n                  test the layout. It spans multiple lines and should wrap around.\n                </styled.div>\n              </styled.div>\n              <Separator />\n            </>\n          )}\n          <styled.form css={{ display: \"flex\", flexDir: \"column\", gap: \"4\" }}>\n            <styled.div css={{ display: \"flex\", flexDir: \"column\", gap: \"3\" }}>\n              <Label htmlFor=\"header\">Header</Label>\n              <Input id=\"header\" defaultValue={item.header} />\n            </styled.div>\n            <styled.div\n              css={{ display: \"grid\", gridTemplateColumns: \"repeat(2, minmax(0, 1fr))\", gap: \"4\" }}\n            >\n              <styled.div css={{ display: \"flex\", flexDir: \"column\", gap: \"3\" }}>\n                <Label htmlFor=\"type\">Type</Label>\n                <Select defaultValue={item.type}>\n                  <SelectTrigger id=\"type\" css={{ w: \"full\" }}>\n                    <SelectValue placeholder=\"Select a type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Table of Contents\">Table of Contents</SelectItem>\n                    <SelectItem value=\"Executive Summary\">Executive Summary</SelectItem>\n                    <SelectItem value=\"Technical Approach\">Technical Approach</SelectItem>\n                    <SelectItem value=\"Design\">Design</SelectItem>\n                    <SelectItem value=\"Capabilities\">Capabilities</SelectItem>\n                    <SelectItem value=\"Focus Documents\">Focus Documents</SelectItem>\n                    <SelectItem value=\"Narrative\">Narrative</SelectItem>\n                    <SelectItem value=\"Cover Page\">Cover Page</SelectItem>\n                  </SelectContent>\n                </Select>\n              </styled.div>\n              <styled.div css={{ display: \"flex\", flexDir: \"column\", gap: \"3\" }}>\n                <Label htmlFor=\"status\">Status</Label>\n                <Select defaultValue={item.status}>\n                  <SelectTrigger id=\"status\" css={{ w: \"full\" }}>\n                    <SelectValue placeholder=\"Select a status\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Done\">Done</SelectItem>\n                    <SelectItem value=\"In Progress\">In Progress</SelectItem>\n                    <SelectItem value=\"Not Started\">Not Started</SelectItem>\n                  </SelectContent>\n                </Select>\n              </styled.div>\n            </styled.div>\n            <styled.div\n              css={{ display: \"grid\", gridTemplateColumns: \"repeat(2, minmax(0, 1fr))\", gap: \"4\" }}\n            >\n              <styled.div css={{ display: \"flex\", flexDir: \"column\", gap: \"3\" }}>\n                <Label htmlFor=\"target\">Target</Label>\n                <Input id=\"target\" defaultValue={item.target} />\n              </styled.div>\n              <styled.div css={{ display: \"flex\", flexDir: \"column\", gap: \"3\" }}>\n                <Label htmlFor=\"limit\">Limit</Label>\n                <Input id=\"limit\" defaultValue={item.limit} />\n              </styled.div>\n            </styled.div>\n            <styled.div css={{ display: \"flex\", flexDir: \"column\", gap: \"3\" }}>\n              <Label htmlFor=\"reviewer\">Reviewer</Label>\n              <Select defaultValue={item.reviewer}>\n                <SelectTrigger id=\"reviewer\" css={{ w: \"full\" }}>\n                  <SelectValue placeholder=\"Select a reviewer\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"Eddie Lake\">Eddie Lake</SelectItem>\n                  <SelectItem value=\"Jamik Tashpulatov\">Jamik Tashpulatov</SelectItem>\n                  <SelectItem value=\"Emily Whalen\">Emily Whalen</SelectItem>\n                </SelectContent>\n              </Select>\n            </styled.div>\n          </styled.form>\n        </styled.div>\n        <DrawerFooter>\n          <Button>Submit</Button>\n          <DrawerClose asChild>\n            <Button variant=\"outline\">Done</Button>\n          </DrawerClose>\n        </DrawerFooter>\n      </DrawerContent>\n    </Drawer>\n  );\n}\n"
    },
    {
      "path": "registry/default/blocks/dashboard-01/components/nav-documents.tsx",
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { type IconType } from \"react-icons\";\nimport { TbDots, TbFolder, TbShare3, TbTrash } from \"react-icons/tb\";\nimport { css } from \"styled-system/css\";\nimport { styled } from \"styled-system/jsx\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/registry/default/ui/dropdown-menu\";\nimport {\n  SidebarGroup,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  useSidebar,\n} from \"@/registry/default/ui/sidebar\";\n\nexport function NavDocuments({\n  items,\n}: {\n  items: {\n    name: string;\n    url: string;\n    icon: IconType;\n  }[];\n}) {\n  const { isMobile } = useSidebar();\n\n  return (\n    <SidebarGroup css={{ \".group[data-collapsible=icon] &\": { display: \"none\" } }}>\n      <SidebarGroupLabel>Documents</SidebarGroupLabel>\n      <SidebarMenu>\n        {items.map((item) => (\n          <SidebarMenuItem key={item.name}>\n            <SidebarMenuButton asChild>\n              <a href={item.url}>\n                <item.icon />\n                <span>{item.name}</span>\n              </a>\n            </SidebarMenuButton>\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <SidebarMenuAction\n                  showOnHover\n                  css={{ rounded: \"sm\", \"&[data-state=open]\": { bg: \"accent\" } }}\n                >\n                  <TbDots />\n                  <styled.span css={{ srOnly: true }}>More</styled.span>\n                </SidebarMenuAction>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent\n                css={{ w: \"24\", rounded: \"lg\" }}\n                side={isMobile ? \"bottom\" : \"right\"}\n                align={isMobile ? \"end\" : \"start\"}\n              >\n                <DropdownMenuItem>\n                  <TbFolder />\n                  <span>Open</span>\n                </DropdownMenuItem>\n                <DropdownMenuItem>\n                  <TbShare3 />\n                  <span>Share</span>\n                </DropdownMenuItem>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem variant=\"danger\">\n                  <TbTrash />\n                  <span>Delete</span>\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </SidebarMenuItem>\n        ))}\n        <SidebarMenuItem>\n          <SidebarMenuButton css={{ color: \"sidebar.fg/70\" }}>\n            <TbDots className={css({ color: \"sidebar.fg/70\" })} />\n            <span>More</span>\n          </SidebarMenuButton>\n        </SidebarMenuItem>\n      </SidebarMenu>\n    </SidebarGroup>\n  );\n}\n"
    },
    {
      "path": "registry/default/blocks/dashboard-01/components/nav-main.tsx",
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { type IconType } from \"react-icons\";\nimport { TbCirclePlusFilled, TbMail } from \"react-icons/tb\";\nimport { styled } from \"styled-system/jsx\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport {\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n} from \"@/registry/default/ui/sidebar\";\n\nexport function NavMain({\n  items,\n}: {\n  items: {\n    title: string;\n    url: string;\n    icon?: IconType;\n  }[];\n}) {\n  return (\n    <SidebarGroup>\n      <SidebarGroupContent css={{ display: \"flex\", flexDir: \"column\", gap: \"2\" }}>\n        <SidebarMenu>\n          <SidebarMenuItem css={{ display: \"flex\", alignItems: \"center\", gap: \"2\" }}>\n            <SidebarMenuButton\n              tooltip=\"Quick Create\"\n              css={{\n                minW: \"8\",\n                bg: \"primary\",\n                color: \"primary.fg\",\n                transitionDuration: \"normal\",\n                transitionTimingFunction: \"linear\",\n                _hover: {\n                  bg: \"primary/90\",\n                  color: \"primary.fg\",\n                },\n                \"&:active\": {\n                  bg: \"primary/90\",\n                  color: \"primary.fg\",\n                },\n              }}\n            >\n              <TbCirclePlusFilled />\n              <span>Quick Create</span>\n            </SidebarMenuButton>\n            <Button\n              size=\"icon\"\n              css={{\n                w: \"8\",\n                h: \"8\",\n                \".group[data-collapsible=icon] &\": { opacity: \"0\" },\n              }}\n              variant=\"outline\"\n            >\n              <TbMail />\n              <styled.span css={{ srOnly: true }}>Inbox</styled.span>\n            </Button>\n          </SidebarMenuItem>\n        </SidebarMenu>\n        <SidebarMenu>\n          {items.map((item) => (\n            <SidebarMenuItem key={item.title}>\n              <SidebarMenuButton tooltip={item.title}>\n                {item.icon && <item.icon />}\n                <span>{item.title}</span>\n              </SidebarMenuButton>\n            </SidebarMenuItem>\n          ))}\n        </SidebarMenu>\n      </SidebarGroupContent>\n    </SidebarGroup>\n  );\n}\n"
    },
    {
      "path": "registry/default/blocks/dashboard-01/components/nav-secondary.tsx",
      "type": "registry:component",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { type IconType } from \"react-icons\";\nimport {\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n} from \"@/registry/default/ui/sidebar\";\n\nexport function NavSecondary({\n  items,\n  ...props\n}: {\n  items: {\n    title: string;\n    url: string;\n    icon: IconType;\n  }[];\n} & React.ComponentPropsWithoutRef<typeof SidebarGroup>) {\n  return (\n    <SidebarGroup {...props}>\n      <SidebarGroupContent>\n        <SidebarMenu>\n          {items.map((item) => (\n            <SidebarMenuItem key={item.title}>\n              <SidebarMenuButton asChild>\n                <a href={item.url}>\n                  <item.icon />\n                  <span>{item.title}</span>\n                </a>\n              </SidebarMenuButton>\n            </SidebarMenuItem>\n          ))}\n        </SidebarMenu>\n      </SidebarGroupContent>\n    </SidebarGroup>\n  );\n}\n"
    },
    {
      "path": "registry/default/blocks/dashboard-01/components/nav-user.tsx",
      "type": "registry:component",
      "content": "\"use client\";\n\nimport {\n  TbCreditCard,\n  TbDotsVertical,\n  TbLogout,\n  TbNotification,\n  TbUserCircle,\n} from \"react-icons/tb\";\nimport { css } from \"styled-system/css\";\nimport { styled } from \"styled-system/jsx\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/registry/default/ui/avatar\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/registry/default/ui/dropdown-menu\";\nimport {\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  useSidebar,\n} from \"@/registry/default/ui/sidebar\";\n\nexport function NavUser({\n  user,\n}: {\n  user: {\n    name: string;\n    email: string;\n    avatar: string;\n  };\n}) {\n  const { isMobile } = useSidebar();\n\n  return (\n    <SidebarMenu>\n      <SidebarMenuItem>\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <SidebarMenuButton\n              size=\"lg\"\n              css={{ \"&[data-state=open]\": { bg: \"sidebar.accent\", color: \"sidebar.accent.fg\" } }}\n            >\n              <Avatar css={{ w: \"8\", h: \"8\", rounded: \"lg\", filter: \"grayscale(100%)\" }}>\n                <AvatarImage src={user.avatar} alt={user.name} />\n                <AvatarFallback css={{ rounded: \"lg\" }}>CN</AvatarFallback>\n              </Avatar>\n              <styled.div\n                css={{\n                  display: \"grid\",\n                  flex: \"1\",\n                  textAlign: \"left\",\n                  textStyle: \"sm\",\n                  lineHeight: \"tight\",\n                }}\n              >\n                <styled.span css={{ truncate: true, fontWeight: \"medium\" }}>\n                  {user.name}\n                </styled.span>\n                <styled.span css={{ color: \"muted.fg\", truncate: true, textStyle: \"xs\" }}>\n                  {user.email}\n                </styled.span>\n              </styled.div>\n              <TbDotsVertical className={css({ ml: \"auto\", w: \"4\", h: \"4\" })} />\n            </SidebarMenuButton>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent\n            css={{\n              w: \"var(--radix-dropdown-menu-trigger-width)\",\n              minW: \"56\",\n              rounded: \"lg\",\n            }}\n            side={isMobile ? \"bottom\" : \"right\"}\n            align=\"end\"\n            sideOffset={4}\n          >\n            <DropdownMenuLabel css={{ p: \"0\", fontWeight: \"normal\" }}>\n              <styled.div\n                css={{\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  gap: \"2\",\n                  px: \"1\",\n                  py: \"1.5\",\n                  textAlign: \"left\",\n                  textStyle: \"sm\",\n                }}\n              >\n                <Avatar css={{ w: \"8\", h: \"8\", rounded: \"lg\" }}>\n                  <AvatarImage src={user.avatar} alt={user.name} />\n                  <AvatarFallback css={{ rounded: \"lg\" }}>CN</AvatarFallback>\n                </Avatar>\n                <styled.div\n                  css={{\n                    display: \"grid\",\n                    flex: \"1\",\n                    textAlign: \"left\",\n                    textStyle: \"sm\",\n                    lineHeight: \"tight\",\n                  }}\n                >\n                  <styled.span css={{ truncate: true, fontWeight: \"medium\" }}>\n                    {user.name}\n                  </styled.span>\n                  <styled.span css={{ color: \"muted.fg\", truncate: true, textStyle: \"xs\" }}>\n                    {user.email}\n                  </styled.span>\n                </styled.div>\n              </styled.div>\n            </DropdownMenuLabel>\n            <DropdownMenuSeparator />\n            <DropdownMenuGroup>\n              <DropdownMenuItem>\n                <TbUserCircle />\n                Account\n              </DropdownMenuItem>\n              <DropdownMenuItem>\n                <TbCreditCard />\n                Billing\n              </DropdownMenuItem>\n              <DropdownMenuItem>\n                <TbNotification />\n                Notifications\n              </DropdownMenuItem>\n            </DropdownMenuGroup>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem>\n              <TbLogout />\n              Log out\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </SidebarMenuItem>\n    </SidebarMenu>\n  );\n}\n"
    },
    {
      "path": "registry/default/blocks/dashboard-01/components/section-cards.tsx",
      "type": "registry:component",
      "content": "import { TbTrendingDown, TbTrendingUp } from \"react-icons/tb\";\nimport { css } from \"styled-system/css\";\nimport { styled } from \"styled-system/jsx\";\nimport { Badge } from \"@/registry/default/ui/badge\";\nimport {\n  Card,\n  CardAction,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/registry/default/ui/card\";\n\nexport function SectionCards() {\n  return (\n    <styled.div\n      css={{\n        display: \"grid\",\n        gridTemplateColumns: \"1fr\",\n        gap: \"4\",\n        px: \"4\",\n        \"& > .card\": {\n          bgGradient: \"to-t\",\n          gradientFrom: \"primary/5\",\n          gradientTo: \"card\",\n          shadow: \"xs\",\n          _dark: {\n            bg: \"card\",\n          },\n        },\n        lg: { px: \"6\" },\n        \"@container main (width >= 36rem)\": {\n          gridTemplateColumns: \"repeat(2, minmax(0, 1fr))\",\n        },\n        \"@container main (width >= 64rem)\": {\n          gridTemplateColumns: \"repeat(4, minmax(0, 1fr))\",\n        },\n      }}\n    >\n      <Card css={{ containerName: \"card\", containerType: \"inline-size\" }}>\n        <CardHeader>\n          <CardDescription>Total Revenue</CardDescription>\n          <CardTitle\n            css={{\n              textStyle: \"2xl\",\n              fontWeight: \"semibold\",\n              fontVariantNumeric: \"tabular-nums\",\n              \"@container card (width >= 250px)\": {\n                textStyle: \"3xl\",\n              },\n            }}\n          >\n            $1,250.00\n          </CardTitle>\n          <CardAction>\n            <Badge variant=\"outline\">\n              <TbTrendingUp />\n              +12.5%\n            </Badge>\n          </CardAction>\n        </CardHeader>\n        <CardFooter\n          css={{ flexDir: \"column\", alignItems: \"flex-start\", gap: \"1.5\", textStyle: \"sm\" }}\n        >\n          <styled.div css={{ lineClamp: \"1\", display: \"flex\", gap: \"2\", fontWeight: \"medium\" }}>\n            Trending up this month <TbTrendingUp className={css({ w: \"4\", h: \"4\" })} />\n          </styled.div>\n          <styled.div css={{ color: \"muted.fg\" }}>Visitors for the last 6 months</styled.div>\n        </CardFooter>\n      </Card>\n      <Card css={{ containerName: \"card\", containerType: \"inline-size\" }}>\n        <CardHeader>\n          <CardDescription>New Customers</CardDescription>\n          <CardTitle\n            css={{\n              textStyle: \"2xl\",\n              fontWeight: \"semibold\",\n              fontVariantNumeric: \"tabular-nums\",\n              \"@container card (width >= 250px)\": {\n                textStyle: \"3xl\",\n              },\n            }}\n          >\n            1,234\n          </CardTitle>\n          <CardAction>\n            <Badge variant=\"outline\">\n              <TbTrendingDown />\n              -20%\n            </Badge>\n          </CardAction>\n        </CardHeader>\n        <CardFooter\n          css={{ flexDir: \"column\", alignItems: \"flex-start\", gap: \"1.5\", textStyle: \"sm\" }}\n        >\n          <styled.div css={{ lineClamp: \"1\", display: \"flex\", gap: \"2\", fontWeight: \"medium\" }}>\n            Down 20% this period <TbTrendingDown className={css({ w: \"4\", h: \"4\" })} />\n          </styled.div>\n          <styled.div css={{ color: \"muted.fg\" }}>Acquisition needs attention</styled.div>\n        </CardFooter>\n      </Card>\n      <Card css={{ containerName: \"card\", containerType: \"inline-size\" }}>\n        <CardHeader>\n          <CardDescription>Active Accounts</CardDescription>\n          <CardTitle\n            css={{\n              textStyle: \"2xl\",\n              fontWeight: \"semibold\",\n              fontVariantNumeric: \"tabular-nums\",\n              \"@container card (width >= 250px)\": {\n                textStyle: \"3xl\",\n              },\n            }}\n          >\n            45,678\n          </CardTitle>\n          <CardAction>\n            <Badge variant=\"outline\">\n              <TbTrendingUp />\n              +12.5%\n            </Badge>\n          </CardAction>\n        </CardHeader>\n        <CardFooter\n          css={{ flexDir: \"column\", alignItems: \"flex-start\", gap: \"1.5\", textStyle: \"sm\" }}\n        >\n          <styled.div css={{ lineClamp: \"1\", display: \"flex\", gap: \"2\", fontWeight: \"medium\" }}>\n            Strong user retention <TbTrendingUp className={css({ w: \"4\", h: \"4\" })} />\n          </styled.div>\n          <styled.div css={{ color: \"muted.fg\" }}>Engagement exceed targets</styled.div>\n        </CardFooter>\n      </Card>\n      <Card css={{ containerName: \"card\", containerType: \"inline-size\" }}>\n        <CardHeader>\n          <CardDescription>Growth Rate</CardDescription>\n          <CardTitle\n            css={{\n              textStyle: \"2xl\",\n              fontWeight: \"semibold\",\n              fontVariantNumeric: \"tabular-nums\",\n              \"@container card (width >= 250px)\": {\n                textStyle: \"3xl\",\n              },\n            }}\n          >\n            4.5%\n          </CardTitle>\n          <CardAction>\n            <Badge variant=\"outline\">\n              <TbTrendingUp />\n              +4.5%\n            </Badge>\n          </CardAction>\n        </CardHeader>\n        <CardFooter\n          css={{ flexDir: \"column\", alignItems: \"flex-start\", gap: \"1.5\", textStyle: \"sm\" }}\n        >\n          <styled.div css={{ lineClamp: \"1\", display: \"flex\", gap: \"2\", fontWeight: \"medium\" }}>\n            Steady performance increase <TbTrendingUp className={css({ w: \"4\", h: \"4\" })} />\n          </styled.div>\n          <styled.div css={{ color: \"muted.fg\" }}>Meets growth projections</styled.div>\n        </CardFooter>\n      </Card>\n    </styled.div>\n  );\n}\n"
    },
    {
      "path": "registry/default/blocks/dashboard-01/components/site-header.tsx",
      "type": "registry:component",
      "content": "import { styled } from \"styled-system/jsx\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport { Separator } from \"@/registry/default/ui/separator\";\nimport { SidebarTrigger } from \"@/registry/default/ui/sidebar\";\n\nexport function SiteHeader() {\n  return (\n    <styled.header\n      css={{\n        display: \"flex\",\n        h: \"var(--header-height)\",\n        flexShrink: \"0\",\n        alignItems: \"center\",\n        gap: \"2\",\n        borderBottomWidth: \"1px\",\n        transitionProperty: \"width,height\",\n        transitionTimingFunction: \"linear\",\n        \".group-sidebar-wrapper:has[data-collapsible=icon] &\": { h: \"var(--header-height)\" },\n      }}\n    >\n      <styled.div\n        css={{\n          display: \"flex\",\n          w: \"full\",\n          alignItems: \"center\",\n          gap: \"1\",\n          px: \"4\",\n          lg: { gap: \"2\", px: \"6\" },\n        }}\n      >\n        <SidebarTrigger css={{ ml: \"-1\" }} />\n        <Separator orientation=\"vertical\" css={{ mx: \"2\", _vertical: { h: \"4\" } }} />\n        <styled.h1 css={{ textStyle: \"md\", fontWeight: \"medium\" }}>Documents</styled.h1>\n        <styled.div css={{ ml: \"auto\", display: \"flex\", alignItems: \"center\", gap: \"2\" }}>\n          <Button\n            variant=\"ghost\"\n            asChild\n            size=\"sm\"\n            css={{ display: \"none\", sm: { display: \"flex\" } }}\n          >\n            <styled.a\n              href=\"https://github.com/amiftachulh/ui/tree/main/src/registry/default/blocks/dashboard-01\"\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n              css={{ _dark: { color: \"fg\" } }}\n            >\n              GitHub\n            </styled.a>\n          </Button>\n        </styled.div>\n      </styled.div>\n    </styled.header>\n  );\n}\n"
    }
  ],
  "meta": {
    "iframeHeight": "1000px"
  },
  "categories": [
    "dashboard"
  ]
}