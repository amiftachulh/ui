{
  "name": "field",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-slot"
  ],
  "files": [
    {
      "path": "registry/default/ui/field.tsx",
      "type": "registry:ui",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { createStyleContext } from \"styled-system/jsx\";\nimport { field } from \"styled-system/recipes\";\n\nconst { withProvider, withContext } = createStyleContext(field);\n\ninterface FieldContextValue {\n  id: string;\n  invalid?: boolean;\n}\n\nconst FieldContext = React.createContext({} as FieldContextValue);\n\ninterface FieldProps extends React.ComponentProps<\"div\"> {\n  invalid?: boolean;\n}\n\nfunction Root({ children, invalid, ...props }: FieldProps) {\n  const id = React.useId();\n\n  return (\n    <FieldContext value={{ id, invalid }}>\n      <div {...props}>{children}</div>\n    </FieldContext>\n  );\n}\nconst Field = withProvider(Root, \"root\");\n\nfunction useField() {\n  const context = React.useContext(FieldContext);\n  if (!context) {\n    throw new Error(\"useField must be used within a <Field /> component\");\n  }\n\n  const { id, invalid } = context;\n  return {\n    id,\n    fieldDescriptionId: `${id}-field-description`,\n    fieldErrorId: `${id}-field-error`,\n    invalid,\n  };\n}\n\nfunction Label({ children, ...props }: React.ComponentProps<\"label\">) {\n  const { id, invalid } = useField();\n  return (\n    <label htmlFor={id} aria-invalid={invalid} {...props}>\n      {children}\n    </label>\n  );\n}\nconst FieldLabel = withContext(Label, \"label\");\n\nfunction Control(props: React.ComponentProps<typeof Slot>) {\n  const { id, fieldDescriptionId, invalid } = useField();\n  return <Slot id={id} aria-describedby={fieldDescriptionId} aria-invalid={invalid} {...props} />;\n}\nconst FieldControl = withContext(Control, \"control\");\n\nfunction Description(props: React.ComponentProps<\"p\">) {\n  const { fieldDescriptionId } = useField();\n  return <p id={fieldDescriptionId} {...props} />;\n}\nconst FieldDescription = withContext(Description, \"description\");\n\nfunction ErrorBase({ children, ...props }: React.ComponentProps<\"p\">) {\n  const { invalid, fieldErrorId } = useField();\n\n  if (invalid) return null;\n\n  return (\n    <p id={fieldErrorId} {...props}>\n      {children}\n    </p>\n  );\n}\nconst FieldError = withContext(ErrorBase, \"error\");\n\nexport { Field, FieldLabel, FieldControl, FieldDescription, FieldError, useField };\n"
    }
  ]
}