{
  "name": "field",
  "type": "registry:ui",
  "files": [
    {
      "path": "registry/default/ui/field.tsx",
      "type": "registry:ui",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { styled } from \"styled-system/jsx\";\nimport { field } from \"styled-system/recipes\";\nimport { Label } from \"@/registry/default/ui/label\";\nimport { Separator } from \"./separator\";\n\nconst classes = field();\n\nfunction FieldSet(props: React.ComponentProps<typeof styled.fieldset>) {\n  return <styled.fieldset data-slot=\"field-set\" className={classes.set} {...props} />;\n}\n\nfunction FieldLegend({\n  variant = \"legend\",\n  ...props\n}: React.ComponentProps<typeof styled.legend> & { variant?: \"legend\" | \"label\" }) {\n  return (\n    <styled.legend\n      data-slot=\"legend\"\n      data-variant={variant}\n      className={classes.legend}\n      {...props}\n    />\n  );\n}\n\nfunction FieldGroup(props: React.ComponentProps<typeof styled.div>) {\n  return <styled.div data-slot=\"group\" className={classes.group} {...props} />;\n}\n\nfunction Field({\n  orientation = \"vertical\",\n  ...props\n}: React.ComponentProps<typeof styled.div> & {\n  orientation?: \"horizontal\" | \"vertical\" | \"responsive\";\n}) {\n  return (\n    <styled.div\n      role=\"group\"\n      data-slot=\"field\"\n      data-orientation={orientation}\n      className={classes.root}\n      {...props}\n    />\n  );\n}\n\nfunction FieldContent(props: React.ComponentProps<typeof styled.div>) {\n  return <styled.div data-slot=\"field-content\" className={classes.content} {...props} />;\n}\n\nfunction FieldLabel({ css, ...props }: React.ComponentProps<typeof Label>) {\n  return (\n    <Label\n      data-slot=\"field-label\"\n      css={{\n        display: \"flex\",\n        w: \"fit\",\n        gap: \"2\",\n        lineHeight: \"snug\",\n        \"[data-slot=field][data-disabled=true] &\": {\n          opacity: \"0.5\",\n        },\n        \"&:has(> [data-slot=field])\": {\n          w: \"full\",\n          flexDir: \"column\",\n          rounded: \"md\",\n          borderWidth: \"1px\",\n        },\n        \"& > [data-slot=field]\": {\n          p: \"4\",\n        },\n        \"&:has([data-state=checked])\": {\n          bg: \"primary/5\",\n          borderColor: \"primary\",\n          _dark: {\n            bg: \"primary/10\",\n          },\n        },\n        ...css,\n      }}\n      {...props}\n    />\n  );\n}\n\nfunction FieldTitle(props: React.ComponentProps<typeof styled.div>) {\n  return <styled.div data-slot=\"field-label\" className={classes.title} {...props} />;\n}\n\nfunction FieldDescription(props: React.ComponentProps<typeof styled.p>) {\n  return <styled.p data-slot=\"field-description\" className={classes.description} {...props} />;\n}\n\nfunction FieldSeparator({ children, ...props }: React.ComponentProps<typeof styled.div>) {\n  return (\n    <styled.div\n      data-slot=\"field-separator\"\n      data-content={!!children}\n      className={classes.separator}\n      {...props}\n    >\n      <Separator css={{ pos: \"absolute\", inset: \"0\", top: \"50%\" }} />\n      {children && (\n        <styled.span\n          data-slot=\"field-separator-content\"\n          css={{\n            bg: \"bg\",\n            color: \"muted.fg\",\n            pos: \"relative\",\n            mx: \"auto\",\n            display: \"block\",\n            w: \"fit\",\n            px: \"2\",\n          }}\n        >\n          {children}\n        </styled.span>\n      )}\n    </styled.div>\n  );\n}\n\nfunction FieldError({\n  children,\n  errors,\n  ...props\n}: React.ComponentProps<typeof styled.div> & {\n  errors?: Array<{ message?: string }>;\n}) {\n  const content = React.useMemo(() => {\n    if (children) {\n      return children;\n    }\n\n    if (!errors) {\n      return null;\n    }\n\n    if (errors?.length === 1 && errors[0]?.message) {\n      return errors[0]?.message;\n    }\n\n    return (\n      <styled.ul\n        css={{ ml: \"4\", display: \"flex\", listStyleType: \"disc\", flexDir: \"column\", gap: \"1\" }}\n      >\n        {errors.map((error, index) => error?.message && <li key={index}>{error.message}</li>)}\n      </styled.ul>\n    );\n  }, [children, errors]);\n\n  if (!content) {\n    return null;\n  }\n\n  return (\n    <styled.div role=\"alert\" data-slot=\"field-error\" className={classes.error} {...props}>\n      {content}\n    </styled.div>\n  );\n}\n\nexport {\n  Field,\n  FieldLabel,\n  FieldDescription,\n  FieldError,\n  FieldGroup,\n  FieldLegend,\n  FieldSeparator,\n  FieldSet,\n  FieldContent,\n  FieldTitle,\n};\n"
    },
    {
      "path": "registry/default/slot-recipes/field.ts",
      "type": "registry:slot-recipe",
      "content": "import { defineSlotRecipe } from \"@pandacss/dev\";\n\nexport const fieldSlotRecipe = defineSlotRecipe({\n  className: \"field\",\n  slots: [\n    \"set\",\n    \"legend\",\n    \"group\",\n    \"root\",\n    \"content\",\n    \"label\",\n    \"title\",\n    \"description\",\n    \"separator\",\n    \"error\",\n  ],\n  base: {\n    set: {\n      display: \"flex\",\n      flexDir: \"column\",\n      gap: \"6\",\n      \"&:has(> [data-slot=checkbox-group])\": {\n        gap: \"3\",\n      },\n      \"&:has(> [data-slot=radio-group])\": {\n        gap: \"3\",\n      },\n    },\n\n    legend: {\n      mb: \"3\",\n      fontWeight: \"medium\",\n      \"&[data-variant=legend]\": {\n        textStyle: \"md\",\n      },\n      \"&[data-variant=label]\": {\n        textStyle: \"sm\",\n      },\n    },\n\n    group: {\n      containerName: \"field-group\",\n      containerType: \"inline-size\",\n      display: \"flex\",\n      w: \"full\",\n      flexDir: \"column\",\n      gap: \"7\",\n      \"&[data-slot=checkbox-group]\": {\n        gap: \"3\",\n      },\n      \"&[data-slot=field-group]\": {\n        gap: \"4\",\n      },\n    },\n\n    root: {\n      display: \"flex\",\n      w: \"full\",\n      gap: \"3\",\n      \"&[data-invalid=true]\": {\n        color: \"danger\",\n      },\n      \"&[data-orientation=horizontal]\": {\n        flexDir: \"row\",\n        alignItems: \"center\",\n        \"& > .field__label\": {\n          flex: \"auto\",\n        },\n        \"&:has(> [data-slot=field-content])\": {\n          alignItems: \"flex-start\",\n          \"& > [role=checkbox], & > [role=radio]\": {\n            mt: \"1px\",\n          },\n        },\n      },\n      \"&[data-orientation=vertical]\": {\n        flexDir: \"column\",\n        \"& > *\": {\n          w: \"full\",\n        },\n        \"& > [data-visible=false]\": {\n          w: \"auto\",\n        },\n      },\n      \"&[data-orientation=responsive]\": {\n        flexDir: \"column\",\n        \"& > *\": {\n          w: \"full\",\n        },\n        \"& > [data-visible=false]\": {\n          w: \"auto\",\n        },\n        \"@container field-group (width >= 28rem)\": {\n          flexDir: \"row\",\n          alignItems: \"center\",\n          \"& > *\": {\n            w: \"auto\",\n          },\n          \"& > [data-slot=field-label]\": {\n            flex: \"auto\",\n          },\n          \"&:has(> [data-slot=field-content])\": {\n            alignItems: \"flex-start\",\n            \"& > [role=checkbox], & > [role=radio]\": {\n              mt: \"1px\",\n            },\n          },\n        },\n      },\n    },\n\n    content: {\n      display: \"flex\",\n      flex: \"1\",\n      flexDir: \"column\",\n      gap: \"1.5\",\n      lineHeight: \"snug\",\n    },\n\n    label: {},\n\n    title: {\n      display: \"flex\",\n      w: \"fit\",\n      alignItems: \"center\",\n      gap: \"2\",\n      textStyle: \"sm\",\n      lineHeight: \"snug\",\n      fontWeight: \"medium\",\n      \".field__root[data-disabled=true] &\": {\n        opacity: \"0.5\",\n      },\n    },\n\n    description: {\n      color: \"muted.fg\",\n      textStyle: \"sm\",\n      lineHeight: \"normal\",\n      fontWeight: \"normal\",\n      \".field__root:has([data-orientation=horizontal]) &\": {\n        textWrap: \"balance\",\n      },\n      _last: {\n        mt: \"0\",\n      },\n      \"&:nth-last-child(2)\": {\n        mt: \"-1\",\n      },\n      \"[data-variant=legend] + &\": {\n        mt: \"-1.5\",\n      },\n      \"& > a\": {\n        textDecoration: \"underline\",\n        textUnderlineOffset: \"4px\",\n        _hover: {\n          color: \"primary\",\n        },\n      },\n    },\n\n    separator: {\n      pos: \"relative\",\n      my: \"-2\",\n      h: \"5\",\n      textStyle: \"sm\",\n      \".field__group[data-variant=outline] &\": {\n        mb: \"-2\",\n      },\n    },\n\n    error: {\n      color: \"danger\",\n      textStyle: \"sm\",\n      fontWeight: \"normal\",\n    },\n  },\n});\n"
    }
  ]
}