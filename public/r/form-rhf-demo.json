{
  "name": "form-rhf-demo",
  "type": "registry:example",
  "dependencies": [
    "react-hook-form",
    "@hookform/resolvers",
    "zod"
  ],
  "registryDependencies": [
    "field",
    "input",
    "input-group",
    "button",
    "card"
  ],
  "files": [
    {
      "path": "registry/default/examples/form-rhf-demo.tsx",
      "type": "registry:example",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { toast } from \"sonner\";\nimport { styled } from \"styled-system/jsx\";\nimport * as z from \"zod\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/registry/default/ui/card\";\nimport {\n  Field,\n  FieldDescription,\n  FieldError,\n  FieldGroup,\n  FieldLabel,\n} from \"@/registry/default/ui/field\";\nimport { Input } from \"@/registry/default/ui/input\";\nimport {\n  InputGroup,\n  InputGroupAddon,\n  InputGroupText,\n  InputGroupTextarea,\n} from \"@/registry/default/ui/input-group\";\n\nconst formSchema = z.object({\n  title: z\n    .string()\n    .min(5, \"Bug title must be at least 5 characters.\")\n    .max(32, \"Bug title must be at most 32 characters.\"),\n  description: z\n    .string()\n    .min(20, \"Description must be at least 20 characters.\")\n    .max(100, \"Description must be at most 100 characters.\"),\n});\n\nexport default function BugReportForm() {\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n    },\n  });\n\n  function onSubmit(data: z.infer<typeof formSchema>) {\n    toast(\"You submitted the following values:\", {\n      description: (\n        <styled.pre\n          css={{\n            mt: \"2\",\n            overflowX: \"auto\",\n            w: \"320px\",\n            rounded: \"md\",\n            bg: \"slate.950\",\n            p: \"4\",\n            borderWidth: \"1px\",\n          }}\n        >\n          <code>{JSON.stringify(data, null, 2)}</code>\n        </styled.pre>\n      ),\n    });\n  }\n\n  return (\n    <Card css={{ w: \"full\", sm: { maxW: \"md\" } }}>\n      <CardHeader>\n        <CardTitle>Bug Report</CardTitle>\n        <CardDescription>Help us improve by reporting bugs you encounter.</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <form id=\"form-rhf-demo\" onSubmit={form.handleSubmit(onSubmit)}>\n          <FieldGroup>\n            <Controller\n              name=\"title\"\n              control={form.control}\n              render={({ field, fieldState }) => (\n                <Field data-invalid={fieldState.invalid}>\n                  <FieldLabel htmlFor=\"form-rhf-demo-title\">Bug Title</FieldLabel>\n                  <Input\n                    {...field}\n                    id=\"form-rhf-demo-title\"\n                    aria-invalid={fieldState.invalid}\n                    placeholder=\"Login button not working on mobile\"\n                    autoComplete=\"off\"\n                  />\n                  {fieldState.invalid && <FieldError errors={[fieldState.error]} />}\n                </Field>\n              )}\n            />\n            <Controller\n              name=\"description\"\n              control={form.control}\n              render={({ field, fieldState }) => (\n                <Field data-invalid={fieldState.invalid}>\n                  <FieldLabel htmlFor=\"form-rhf-demo-description\">Description</FieldLabel>\n                  <InputGroup>\n                    <InputGroupTextarea\n                      {...field}\n                      id=\"form-rhf-demo-description\"\n                      placeholder=\"I'm having an issue with the login button on mobile.\"\n                      rows={6}\n                      css={{ minH: \"24\", resize: \"none\" }}\n                      aria-invalid={fieldState.invalid}\n                    />\n                    <InputGroupAddon align=\"block-end\">\n                      <InputGroupText css={{ fontVariantNumeric: \"tabular-nums\" }}>\n                        {field.value.length}/100 characters\n                      </InputGroupText>\n                    </InputGroupAddon>\n                  </InputGroup>\n                  <FieldDescription>\n                    Include steps to reproduce, expected behavior, and what actually happened.\n                  </FieldDescription>\n                  {fieldState.invalid && <FieldError errors={[fieldState.error]} />}\n                </Field>\n              )}\n            />\n          </FieldGroup>\n        </form>\n      </CardContent>\n      <CardFooter>\n        <Field orientation=\"horizontal\">\n          <Button type=\"button\" variant=\"outline\" onClick={() => form.reset()}>\n            Reset\n          </Button>\n          <Button type=\"submit\" form=\"form-rhf-demo\">\n            Submit\n          </Button>\n        </Field>\n      </CardFooter>\n    </Card>\n  );\n}\n"
    }
  ]
}