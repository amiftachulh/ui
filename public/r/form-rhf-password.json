{
  "name": "form-rhf-password",
  "type": "registry:example",
  "dependencies": [
    "react-hook-form",
    "@hookform/resolvers",
    "zod"
  ],
  "registryDependencies": [
    "field",
    "input-group",
    "progress",
    "button",
    "card"
  ],
  "files": [
    {
      "path": "registry/default/examples/form-rhf-password.tsx",
      "type": "registry:example",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { LuCheck } from \"react-icons/lu\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { toast } from \"sonner\";\nimport { css } from \"styled-system/css\";\nimport { styled } from \"styled-system/jsx\";\nimport * as z from \"zod\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/registry/default/ui/card\";\nimport { Field, FieldError, FieldGroup, FieldLabel } from \"@/registry/default/ui/field\";\nimport { InputGroup, InputGroupAddon, InputGroupInput } from \"@/registry/default/ui/input-group\";\nimport { Progress } from \"@/registry/default/ui/progress\";\n\nconst passwordRequirements = [\n  {\n    id: \"length\",\n    label: \"At least 8 characters\",\n    test: (val: string) => val.length >= 8,\n  },\n  {\n    id: \"lowercase\",\n    label: \"One lowercase letter\",\n    test: (val: string) => /[a-z]/.test(val),\n  },\n  {\n    id: \"uppercase\",\n    label: \"One uppercase letter\",\n    test: (val: string) => /[A-Z]/.test(val),\n  },\n  { id: \"number\", label: \"One number\", test: (val: string) => /\\d/.test(val) },\n  {\n    id: \"special\",\n    label: \"One special character\",\n    test: (val: string) => /[!@#$%^&*(),.?\":{}|<>]/.test(val),\n  },\n];\n\nconst formSchema = z.object({\n  password: z\n    .string()\n    .min(8, \"Password must be at least 8 characters\")\n    .refine((val) => /[a-z]/.test(val), \"Password must contain at least one lowercase letter\")\n    .refine((val) => /[A-Z]/.test(val), \"Password must contain at least one uppercase letter\")\n    .refine((val) => /\\d/.test(val), \"Password must contain at least one number\")\n    .refine(\n      (val) => /[!@#$%^&*(),.?\":{}|<>]/.test(val),\n      \"Password must contain at least one special character\"\n    ),\n});\n\nexport default function FormRhfPassword() {\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      password: \"\",\n    },\n  });\n\n  const password = form.watch(\"password\");\n\n  // Calculate password strength.\n  const metRequirements = passwordRequirements.filter((req) => req.test(password || \"\"));\n  const strengthPercentage = (metRequirements.length / passwordRequirements.length) * 100;\n\n  // Determine strength level and color.\n  const getStrengthColor = () => {\n    if (strengthPercentage === 0) return \"bg-neutral-200\";\n    if (strengthPercentage <= 40) return \"bg-red-500\";\n    if (strengthPercentage <= 80) return \"bg-yellow-500\";\n    return \"bg-green-500\";\n  };\n\n  const allRequirementsMet = metRequirements.length === passwordRequirements.length;\n\n  function onSubmit(data: z.infer<typeof formSchema>) {\n    toast(\"You submitted the following values:\", {\n      description: (\n        <styled.pre\n          css={{\n            mt: \"2\",\n            overflowX: \"auto\",\n            w: \"320px\",\n            rounded: \"md\",\n            bg: \"slate.950\",\n            p: \"4\",\n            borderWidth: \"1px\",\n          }}\n        >\n          <code>{JSON.stringify(data, null, 2)}</code>\n        </styled.pre>\n      ),\n    });\n  }\n\n  return (\n    <Card css={{ w: \"full\", sm: { maxW: \"md\" } }}>\n      <CardHeader css={{ borderBottomWidth: \"1px\" }}>\n        <CardTitle>Create Password</CardTitle>\n        <CardDescription>Choose a strong password to secure your account.</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <form id=\"form-rhf-password\" onSubmit={form.handleSubmit(onSubmit)}>\n          <FieldGroup>\n            <Controller\n              name=\"password\"\n              control={form.control}\n              render={({ field, fieldState }) => (\n                <Field data-invalid={fieldState.invalid}>\n                  <FieldLabel htmlFor=\"form-rhf-password-input\">Password</FieldLabel>\n                  <InputGroup>\n                    <InputGroupInput\n                      {...field}\n                      id=\"form-rhf-password-input\"\n                      type=\"password\"\n                      placeholder=\"Enter your password\"\n                      aria-invalid={fieldState.invalid}\n                      autoComplete=\"new-password\"\n                    />\n                    <InputGroupAddon align=\"inline-end\">\n                      <LuCheck\n                        data-active={allRequirementsMet}\n                        className={css({\n                          color: \"muted.fg\",\n                          \"&[data-active=true]\": { color: \"green.500\" },\n                        })}\n                      />\n                    </InputGroupAddon>\n                  </InputGroup>\n\n                  {/* Password strength meter. */}\n                  <styled.div css={{ spaceY: \"2\" }}>\n                    <Progress value={strengthPercentage} className={getStrengthColor()} />\n\n                    {/* Requirements list. */}\n                    <styled.div css={{ spaceY: \"1.5\" }}>\n                      {passwordRequirements.map((requirement) => {\n                        const isMet = requirement.test(password || \"\");\n                        return (\n                          <styled.div\n                            key={requirement.id}\n                            css={{\n                              display: \"flex\",\n                              alignItems: \"center\",\n                              gap: \"2\",\n                              textStyle: \"sm\",\n                            }}\n                          >\n                            <LuCheck\n                              data-active={isMet}\n                              className={css({\n                                color: \"muted.fg\",\n                                w: \"4\",\n                                h: \"4\",\n                                \"&[data-active=true]\": { color: \"green.500\" },\n                              })}\n                            />\n                            <styled.span\n                              css={{\n                                color: \"muted.fg\",\n                                \"[data-active=true] &\": {\n                                  color: \"fg\",\n                                },\n                              }}\n                            >\n                              {requirement.label}\n                            </styled.span>\n                          </styled.div>\n                        );\n                      })}\n                    </styled.div>\n                  </styled.div>\n\n                  {fieldState.invalid && <FieldError errors={[fieldState.error]} />}\n                </Field>\n              )}\n            />\n          </FieldGroup>\n        </form>\n      </CardContent>\n      <CardFooter css={{ borderTopWidth: \"1px\" }}>\n        <Field>\n          <Button type=\"submit\" form=\"form-rhf-password\">\n            Create Password\n          </Button>\n          <Button type=\"button\" variant=\"outline\" onClick={() => form.reset()}>\n            Reset\n          </Button>\n        </Field>\n      </CardFooter>\n    </Card>\n  );\n}\n"
    }
  ]
}