{
  "name": "pagination",
  "type": "registry:ui",
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "src/registry/default/ui/pagination.tsx",
      "type": "registry:ui",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { LuChevronLeft, LuChevronRight, LuEllipsis } from \"react-icons/lu\";\nimport { css, cx } from \"styled-system/css\";\nimport { button, ButtonVariantProps, pagination } from \"styled-system/recipes\";\nimport { createStyleContext } from \"@/registry/default/lib/create-style-context\";\n\nconst { withProvider, withContext } = createStyleContext(pagination);\n\nfunction Root(props: React.ComponentProps<\"nav\">) {\n  return <nav role=\"navigation\" aria-label=\"pagination\" {...props} />;\n}\nconst Pagination = withProvider(Root, \"root\");\n\nconst PaginationContent = withContext(\"ul\", \"content\");\nconst PaginationItem = withContext(\"li\", \"item\");\n\ntype PaginationLinkProps = {\n  isActive?: boolean;\n} & Pick<ButtonVariantProps, \"size\"> &\n  React.ComponentProps<\"a\">;\n\nfunction Link({ className, isActive, size = \"icon\", ...props }: PaginationLinkProps) {\n  return (\n    <a\n      aria-current={isActive ? \"page\" : undefined}\n      className={cx(\n        button({\n          variant: isActive ? \"outline\" : \"ghost\",\n          size,\n        }),\n        className\n      )}\n      {...props}\n    />\n  );\n}\nconst PaginationLink = withContext(Link, \"link\");\n\nfunction Previous(props: React.ComponentProps<typeof Link>) {\n  return (\n    <Link aria-label=\"Go to previous page\" size=\"md\" {...props}>\n      <LuChevronLeft className={css({ w: \"4\", h: \"4\" })} />\n      <span>Previous</span>\n    </Link>\n  );\n}\nconst PaginationPrevious = withContext(Previous, \"previous\");\n\nfunction Next(props: React.ComponentProps<typeof Link>) {\n  return (\n    <Link aria-label=\"Go to next page\" size=\"md\" {...props}>\n      <span>Next</span>\n      <LuChevronRight className={css({ w: \"4\", h: \"4\" })} />\n    </Link>\n  );\n}\nconst PaginationNext = withContext(Next, \"next\");\n\nfunction Ellipsis(props: React.ComponentProps<\"span\">) {\n  return (\n    <span aria-hidden {...props}>\n      <LuEllipsis className={css({ w: \"4\", h: \"4\" })} />\n      <span className={css({ srOnly: \"true\" })}>More pages</span>\n    </span>\n  );\n}\nconst PaginationEllipsis = withContext(Ellipsis, \"ellipsis\");\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationItem,\n  PaginationLink,\n  PaginationPrevious,\n  PaginationNext,\n  PaginationEllipsis,\n};\n"
    },
    {
      "path": "src/registry/default/slot-recipes/pagination.ts",
      "type": "registry:slot-recipe",
      "content": "import { defineSlotRecipe } from \"@pandacss/dev\";\n\nexport const paginationSlotRecipe = defineSlotRecipe({\n  className: \"pagination\",\n  slots: [\"root\", \"content\", \"item\", \"link\", \"previous\", \"next\", \"ellipsis\"],\n  base: {\n    root: {\n      mx: \"auto\",\n      display: \"flex\",\n      w: \"full\",\n      justifyContent: \"center\",\n    },\n\n    content: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      alignItems: \"center\",\n      gap: \"1\",\n    },\n\n    previous: {\n      gap: \"1\",\n      px: \"2.5\",\n    },\n\n    next: {\n      gap: \"1\",\n      px: \"2.5\",\n    },\n\n    ellipsis: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      w: \"9\",\n      h: \"9\",\n    },\n  },\n});\n"
    }
  ]
}