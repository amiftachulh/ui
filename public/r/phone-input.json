{
  "name": "phone-input",
  "type": "registry:ui",
  "dependencies": [
    "react-phone-number-input"
  ],
  "registryDependencies": [
    "button",
    "input",
    "popover",
    "scroll-area",
    "command"
  ],
  "files": [
    {
      "path": "src/registry/default/ui/phone-input.tsx",
      "type": "registry:ui",
      "content": "import * as React from \"react\";\nimport { LuCheck, LuChevronsUpDown } from \"react-icons/lu\";\nimport * as RPNInput from \"react-phone-number-input\";\nimport flags from \"react-phone-number-input/flags\";\nimport { css, cx } from \"styled-system/css\";\nimport { styled } from \"styled-system/jsx\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/registry/default/ui/command\";\nimport { Input } from \"@/registry/default/ui/input\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/registry/default/ui/popover\";\nimport { ScrollArea } from \"@/registry/default/ui/scroll-area\";\n\ntype PhoneInputProps = Omit<React.ComponentProps<\"input\">, \"onChange\" | \"value\" | \"ref\"> &\n  Omit<RPNInput.Props<typeof RPNInput.default>, \"onChange\"> & {\n    onChange?: (value: RPNInput.Value) => void;\n  };\n\nconst PhoneInputBase = ({ className, onChange, ...props }: PhoneInputProps) => {\n  return (\n    <RPNInput.default\n      className={cx(css({ display: \"flex\" }), className)}\n      flagComponent={FlagComponent}\n      countrySelectComponent={CountrySelect}\n      inputComponent={InputComponent}\n      smartCaret={false}\n      /**\n       * Handles the onChange event.\n       *\n       * react-phone-number-input might trigger the onChange event as undefined\n       * when a valid phone number is not entered. To prevent this,\n       * the value is coerced to an empty string.\n       *\n       * @param {E164Number | undefined} value - The entered value\n       */\n      onChange={(value) => onChange?.(value || (\"\" as RPNInput.Value))}\n      {...props}\n    />\n  );\n};\nconst PhoneInput = styled(PhoneInputBase);\nPhoneInput.displayName = \"PhoneInput\";\n\nconst InputComponent = ({ css, ...props }: React.ComponentProps<typeof Input>) => (\n  <Input css={{ roundedStart: \"0\", roundedEnd: \"md\", ...css }} {...props} />\n);\nInputComponent.displayName = \"InputComponent\";\n\ntype CountryEntry = { label: string; value: RPNInput.Country | undefined };\n\ntype CountrySelectProps = {\n  disabled?: boolean;\n  value: RPNInput.Country;\n  options: CountryEntry[];\n  onChange: (country: RPNInput.Country) => void;\n};\n\nconst CountrySelect = ({\n  disabled,\n  value: selectedCountry,\n  options: countryList,\n  onChange,\n}: CountrySelectProps) => {\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button\n          type=\"button\"\n          variant=\"outline\"\n          disabled={disabled}\n          css={{\n            display: \"flex\",\n            gap: \"1\",\n            roundedStart: \"md\",\n            roundedEnd: \"0\",\n            borderRightWidth: \"0\",\n            px: \"3\",\n            _focus: { zIndex: 10 },\n          }}\n        >\n          <FlagComponent country={selectedCountry} countryName={selectedCountry} />\n          <LuChevronsUpDown\n            className={css({ mr: \"-2\", w: \"4\", h: \"4\", _disabled: { display: \"none\" } })}\n          />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent css={{ w: \"300px\", p: \"0\" }}>\n        <Command>\n          <CommandInput placeholder=\"Search country...\" />\n          <CommandList>\n            <ScrollArea css={{ h: \"72\" }}>\n              <CommandEmpty>No country found.</CommandEmpty>\n              <CommandGroup>\n                {countryList.map(({ value, label }) =>\n                  value ? (\n                    <CountrySelectOption\n                      key={value}\n                      country={value}\n                      countryName={label}\n                      selectedCountry={selectedCountry}\n                      onChange={onChange}\n                    />\n                  ) : null\n                )}\n              </CommandGroup>\n            </ScrollArea>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n};\n\ninterface CountrySelectOptionProps extends RPNInput.FlagProps {\n  selectedCountry: RPNInput.Country;\n  onChange: (country: RPNInput.Country) => void;\n}\n\nconst CountrySelectOption = ({\n  country,\n  countryName,\n  selectedCountry,\n  onChange,\n}: CountrySelectOptionProps) => {\n  return (\n    <CommandItem className={css({ gap: \"2\" })} onSelect={() => onChange(country)}>\n      <FlagComponent country={country} countryName={countryName} />\n      <span className={css({ flex: \"1\", textStyle: \"sm\" })}>{countryName}</span>\n      <span\n        className={css({ textStyle: \"sm\", color: \"fg/50\" })}\n      >{`+${RPNInput.getCountryCallingCode(country)}`}</span>\n      <LuCheck\n        className={css({\n          ml: \"auto\",\n          w: \"4\",\n          h: \"4\",\n          opacity: country === selectedCountry ? \"1\" : \"0\",\n        })}\n      />\n    </CommandItem>\n  );\n};\n\nconst FlagComponent = ({ country, countryName }: RPNInput.FlagProps) => {\n  const Flag = flags[country];\n\n  return (\n    <span\n      className={css({\n        display: \"flex\",\n        w: \"6\",\n        h: \"4\",\n        overflow: \"hidden\",\n        rounded: \"sm\",\n        bg: \"fg/20\",\n        \"& svg\": {\n          w: \"full\",\n          h: \"full\",\n        },\n      })}\n    >\n      {Flag && <Flag title={countryName} />}\n    </span>\n  );\n};\n\nexport { PhoneInput };\n"
    }
  ]
}