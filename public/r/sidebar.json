{
  "name": "sidebar",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-slot",
    "react-icons"
  ],
  "registryDependencies": [
    "button",
    "separator",
    "sheet",
    "tooltip",
    "input",
    "use-media-query",
    "skeleton"
  ],
  "files": [
    {
      "path": "src/registry/default/ui/sidebar.tsx",
      "type": "registry:ui",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { LuPanelLeft } from \"react-icons/lu\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { css, cva, cx, type RecipeVariantProps } from \"styled-system/css\";\nimport { styled } from \"styled-system/jsx\";\nimport { sidebar } from \"styled-system/recipes\";\nimport { useMediaQuery } from \"@/registry/default/hooks/use-media-query\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport { Input } from \"@/registry/default/ui/input\";\nimport { Separator } from \"@/registry/default/ui/separator\";\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/registry/default/ui/sheet\";\nimport { Skeleton } from \"@/registry/default/ui/skeleton\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/registry/default/ui/tooltip\";\n\nconst classes = sidebar();\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\";\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;\nconst SIDEBAR_WIDTH = \"16rem\";\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\";\nconst SIDEBAR_WIDTH_ICON = \"3rem\";\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\";\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\";\n  open: boolean;\n  setOpen: (open: boolean) => void;\n  openMobile: boolean;\n  setOpenMobile: (open: boolean) => void;\n  isMobile: boolean;\n  toggleSidebar: () => void;\n};\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null);\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext);\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\");\n  }\n\n  return context;\n}\n\nfunction Provider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean;\n  open?: boolean;\n  onOpenChange?: (open: boolean) => void;\n}) {\n  const isMobile = useMediaQuery(\"(max-width: 767px)\");\n  const [openMobile, setOpenMobile] = React.useState(false);\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen);\n  const open = openProp ?? _open;\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value;\n      if (setOpenProp) {\n        setOpenProp(openState);\n      } else {\n        _setOpen(openState);\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;\n    },\n    [setOpenProp, open]\n  );\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open);\n  }, [isMobile, setOpen, setOpenMobile]);\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === SIDEBAR_KEYBOARD_SHORTCUT && (event.metaKey || event.ctrlKey)) {\n        event.preventDefault();\n        toggleSidebar();\n      }\n    };\n\n    window.addEventListener(\"keydown\", handleKeyDown);\n    return () => window.removeEventListener(\"keydown\", handleKeyDown);\n  }, [toggleSidebar]);\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\";\n\n  const contextValue = React.useMemo<SidebarContext>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  );\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cx(\"group-sidebar-wrapper\", classes.wrapper, className)}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  );\n}\nconst SidebarProvider = styled(Provider);\nSidebarProvider.displayName = \"SidebarProvider\";\n\nfunction Root({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\";\n  variant?: \"sidebar\" | \"floating\" | \"inset\";\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\";\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar();\n\n  if (collapsible === \"none\") {\n    return (\n      <div className={cx(classes.nonCollapsibleRoot, className)} {...props}>\n        {children}\n      </div>\n    );\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} side={side} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-mobile=\"true\"\n          css={{\n            bg: \"sidebar\",\n            color: \"sidebar.fg\",\n            w: \"var(--sidebar-width)\",\n            p: \"0\",\n            \"& > button\": { display: \"none\" },\n          }}\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n        >\n          <SheetHeader css={{ srOnly: true }}>\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className={css({ display: \"flex\", flexDir: \"column\", w: \"full\", h: \"full\" })}>\n            {children}\n          </div>\n        </SheetContent>\n      </Sheet>\n    );\n  }\n\n  return (\n    <div\n      className={cx(\n        \"group peer\",\n        css({ color: \"sidebar.fg\", display: \"none\", md: { display: \"block\" } })\n      )}\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        className={cx(\n          css({\n            pos: \"relative\",\n            w: \"var(--sidebar-width)\",\n            bg: \"transparent\",\n            transition: \"all\",\n            \".group[data-collapsible=offcanvas] &\": { w: \"0\" },\n            \".group[data-side=right] &\": { transform: \"rotate(180deg)\" },\n            \".group[data-collapsible=icon] &\": { w: \"var(--sidebar-width-icon)\" },\n            \".group[data-variant=floating][data-collapsible=icon] &, .group[data-variant=inset][data-collapsible=icon] &\":\n              {\n                w: \"calc(var(--sidebar-width-icon) + var(--spacing-4))\",\n              },\n          })\n        )}\n      />\n      <div className={cx(classes.root, className)} {...props}>\n        <div\n          data-sidebar=\"sidebar\"\n          className={css({\n            bg: \"sidebar\",\n            display: \"flex\",\n            flexDir: \"column\",\n            w: \"full\",\n            h: \"full\",\n            \".group[data-variant=floating] &\": {\n              borderWidth: \"1px\",\n              borderColor: \"sidebar.border\",\n              rounded: \"lg\",\n              shadow: \"sm\",\n            },\n          })}\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n}\nconst Sidebar = styled(Root);\nSidebar.displayName = \"Sidebar\";\n\nfunction Trigger({ className, onClick, ...props }: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar();\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cx(classes.trigger, className)}\n      onClick={(event) => {\n        onClick?.(event);\n        toggleSidebar();\n      }}\n      {...props}\n    >\n      <LuPanelLeft />\n      <span className={css({ srOnly: true })}>Toggle Sidebar</span>\n    </Button>\n  );\n}\nconst SidebarTrigger = styled(Trigger);\nSidebarTrigger.displayName = \"SidebarTrigger\";\n\nfunction Rail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar();\n\n  return (\n    <button\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cx(classes.rail, className)}\n      {...props}\n    />\n  );\n}\nconst SidebarRail = styled(Rail);\nSidebarRail.displayName = \"SidebarRail\";\n\nfunction Inset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return <main className={cx(classes.inset, className)} {...props} />;\n}\nconst SidebarInset = styled(Inset);\nSidebarInset.displayName = \"SidebarInset\";\n\nfunction SidebarInputBase({ className, ...props }: React.ComponentProps<typeof Input>) {\n  return <Input data-sidebar=\"input\" className={cx(classes.input, className)} {...props} />;\n}\nconst SidebarInput = styled(SidebarInputBase);\nSidebarInput.displayName = \"SidebarInput\";\n\nfunction Header({ className, ...props }: React.ComponentProps<\"div\">) {\n  return <div data-sidebar=\"header\" className={cx(classes.header, className)} {...props} />;\n}\nconst SidebarHeader = styled(Header);\nSidebarHeader.displayName = \"SidebarHeader\";\n\nfunction Footer({ className, ...props }: React.ComponentProps<\"div\">) {\n  return <div data-sidebar=\"footer\" className={cx(classes.footer, className)} {...props} />;\n}\nconst SidebarFooter = styled(Footer);\nSidebarFooter.displayName = \"SidebarFooter\";\n\nfunction SidebarSeparatorBase({ className, ...props }: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator data-sidebar=\"separator\" className={cx(classes.separator, className)} {...props} />\n  );\n}\nconst SidebarSeparator = styled(SidebarSeparatorBase);\nSidebarSeparator.displayName = \"SidebarSeparator\";\n\nfunction Content({ className, ...props }: React.ComponentProps<\"div\">) {\n  return <div data-sidebar=\"content\" className={cx(classes.content, className)} {...props} />;\n}\nconst SidebarContent = styled(Content);\nSidebarContent.displayName = \"SidebarContent\";\n\nfunction Group({ className, ...props }: React.ComponentProps<\"div\">) {\n  return <div data-sidebar=\"group\" className={cx(classes.group, className)} {...props} />;\n}\nconst SidebarGroup = styled(Group);\nSidebarGroup.displayName = \"SidebarGroup\";\n\nfunction GroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\";\n\n  return (\n    <Comp data-sidebar=\"group-label\" className={cx(classes.groupLabel, className)} {...props} />\n  );\n}\nconst SidebarGroupLabel = styled(GroupLabel);\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\";\n\nfunction GroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp data-sidebar=\"group-action\" className={cx(classes.groupAction, className)} {...props} />\n  );\n}\nconst SidebarGroupAction = styled(GroupAction);\nSidebarGroupAction.displayName = \"SidebarGroupAction\";\n\nfunction GroupContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div data-sidebar=\"group-content\" className={cx(classes.groupContent, className)} {...props} />\n  );\n}\nconst SidebarGroupContent = styled(GroupContent);\nSidebarGroupContent.displayName = \"SidebarGroupContent\";\n\nfunction Menu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return <ul data-sidebar=\"menu\" className={cx(classes.menu, className)} {...props} />;\n}\nconst SidebarMenu = styled(Menu);\nSidebarMenu.displayName = \"SidebarMenu\";\n\nfunction MenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-sidebar=\"menu-item\"\n      className={cx(\"group-menu-item\", classes.menuItem, className)}\n      {...props}\n    />\n  );\n}\nconst SidebarMenuItem = styled(MenuItem);\nSidebarMenuItem.displayName = \"SidebarMenuItem\";\n\nconst sidebarMenuButtonVariants = cva({\n  base: {\n    display: \"flex\",\n    w: \"full\",\n    alignItems: \"center\",\n    gap: \"2\",\n    overflow: \"hidden\",\n    rounded: \"md\",\n    p: \"2\",\n    textStyle: \"sm\",\n    textAlign: \"left\",\n    outlineColor: \"transparent\",\n    transition: \"all\",\n    _hover: {\n      bg: \"sidebar.accent\",\n      color: \"sidebar.accent.fg\",\n    },\n    _focusVisible: {\n      outlineWidth: \"2px\",\n      outlineStyle: \"solid\",\n      outlineColor: \"ring/50\",\n    },\n    _disabled: {\n      pointerEvents: \"none\",\n      opacity: \"0.5\",\n    },\n    \".group-menu-item:has([data-sidebar=menu-action]) &\": {\n      pr: \"8\",\n    },\n    \"&[data-active=true]\": {\n      bg: \"sidebar.accent\",\n      color: \"sidebar.accent.fg\",\n      fontWeight: \"medium\",\n    },\n    _open: {\n      _hover: {\n        bg: \"sidebar.accent\",\n        color: \"sidebar.accent.fg\",\n      },\n    },\n    \".group[data-collapsible=icon] &\": {\n      w: \"8!\",\n      h: \"8!\",\n      p: \"2!\",\n    },\n    \"& > span:last-child\": {\n      truncate: true,\n    },\n    \"& > svg\": {\n      w: \"4\",\n      h: \"4\",\n      flexShrink: \"0\",\n    },\n  },\n  variants: {\n    variant: {\n      default: {\n        _hover: {\n          bg: \"sidebar.accent\",\n          color: \"sidebar.accent.fg\",\n        },\n      },\n      outline: {\n        bg: \"background\",\n        shadow: \"0 0 0 1px hsl(var(--colors-sidebar-border))\",\n        _hover: {\n          bg: \"sidebar.accent\",\n          color: \"sidebar.accent.fg\",\n          shadow: \"0 0 0 1px hsl(var(--colors-sidebar-accent))\",\n        },\n      },\n    },\n    size: {\n      sm: {\n        h: \"7\",\n        textStyle: \"xs\",\n      },\n      md: {\n        h: \"8\",\n        textStyle: \"sm\",\n      },\n      lg: {\n        h: \"12\",\n        textStyle: \"sm\",\n        \".group[data-collapsible=icon] &\": {\n          p: \"0!\",\n        },\n      },\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n    size: \"md\",\n  },\n});\n\nfunction MenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"md\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean;\n  isActive?: boolean;\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>;\n} & RecipeVariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\";\n  const { isMobile, state } = useSidebar();\n\n  const button = (\n    <Comp\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cx(\"peer-menu-button\", sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  );\n\n  if (!tooltip) {\n    return button;\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    };\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  );\n}\nconst SidebarMenuButton = styled(MenuButton);\nSidebarMenuButton.displayName = \"SidebarMenuButton\";\n\nfunction MenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean;\n  showOnHover?: boolean;\n}) {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      data-sidebar=\"menu-action\"\n      data-show-on-hover={showOnHover}\n      className={cx(classes.menuAction, className)}\n      {...props}\n    />\n  );\n}\nconst SidebarMenuAction = styled(MenuAction);\nSidebarMenuAction.displayName = \"SidebarMenuAction\";\n\nfunction MenuBadge({ className, ...props }: React.ComponentProps<\"div\">) {\n  return <div data-sidebar=\"menu-badge\" className={cx(classes.menuBadge, className)} {...props} />;\n}\nconst SidebarMenuBadge = styled(MenuBadge);\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\";\n\nfunction MenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean;\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`;\n  }, []);\n\n  return (\n    <div data-sidebar=\"menu-skeleton\" className={cx(classes.menuSkeleton, className)} {...props}>\n      {showIcon && (\n        <Skeleton css={{ w: \"4\", h: \"4\", rounded: \"md\" }} data-sidebar=\"menu-skeleton-icon\" />\n      )}\n      <Skeleton\n        css={{ h: \"4\", maxW: \"var(--skeleton-width)\", flex: \"1\" }}\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  );\n}\nconst SidebarMenuSkeleton = styled(MenuSkeleton);\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\";\n\nfunction MenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return <ul data-sidebar=\"menu-sub\" className={cx(classes.menuSub, className)} {...props} />;\n}\nconst SidebarMenuSub = styled(MenuSub);\nSidebarMenuSub.displayName = \"SidebarMenuSub\";\n\nfunction MenuSubItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-sidebar=\"menu-sub-item\"\n      className={cx(\"group-menu-sub-item\", classes.menuSubItem, className)}\n      {...props}\n    />\n  );\n}\nconst SidebarMenuSubItem = styled(MenuSubItem);\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\";\n\nfunction MenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean;\n  size?: \"sm\" | \"md\";\n  isActive?: boolean;\n}) {\n  const Comp = asChild ? Slot : \"a\";\n\n  return (\n    <Comp\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cx(classes.menuSubButton, className)}\n      {...props}\n    />\n  );\n}\nconst SidebarMenuSubButton = styled(MenuSubButton);\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\";\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n};\n"
    },
    {
      "path": "src/registry/default/hooks/use-media-query.ts",
      "type": "registry:hook",
      "content": "\"use client\";\n\nimport * as React from \"react\";\n\nexport function useMediaQuery(query: string) {\n  const [value, setValue] = React.useState(false);\n\n  React.useEffect(() => {\n    function onChange(event: MediaQueryListEvent) {\n      setValue(event.matches);\n    }\n\n    const result = window.matchMedia(query);\n    result.addEventListener(\"change\", onChange);\n    setValue(result.matches);\n\n    return () => result.removeEventListener(\"change\", onChange);\n  }, [query]);\n\n  return value;\n}\n"
    },
    {
      "path": "src/registry/default/slot-recipes/sidebar.ts",
      "type": "registry:slot-recipe",
      "content": "import { defineSlotRecipe } from \"@pandacss/dev\";\n\nexport const sidebarSlotRecipe = defineSlotRecipe({\n  className: \"sidebar\",\n  slots: [\n    \"wrapper\",\n    \"nonCollapsibleRoot\",\n    \"root\",\n    \"trigger\",\n    \"rail\",\n    \"inset\",\n    \"input\",\n    \"header\",\n    \"footer\",\n    \"separator\",\n    \"content\",\n    \"group\",\n    \"groupLabel\",\n    \"groupAction\",\n    \"groupContent\",\n    \"menu\",\n    \"menuItem\",\n    \"menuAction\",\n    \"menuBadge\",\n    \"menuSkeleton\",\n    \"menuSub\",\n    \"menuSubItem\",\n    \"menuSubButton\",\n  ],\n  base: {\n    wrapper: {\n      display: \"flex\",\n      minH: \"svh\",\n      w: \"full\",\n      \"&:has([data-variant=inset])\": { bg: \"sidebar\" },\n    },\n\n    nonCollapsibleRoot: {\n      bg: \"sidebar\",\n      color: \"sidebar.fg\",\n      w: \"var(--sidebar-width)\",\n      h: \"full\",\n      flexDir: \"column\",\n    },\n\n    root: {\n      pos: \"fixed\",\n      insetY: \"0\",\n      zIndex: \"10\",\n      display: \"none\",\n      w: \"var(--sidebar-width)\",\n      h: \"svh\",\n      transitionProperty: \"left, right, width\",\n      transitionDuration: \"normal\",\n      transitionTimingFunction: \"default\",\n      md: { display: \"flex\" },\n      \".group[data-side=left] &\": {\n        left: \"0\",\n        borderRightWidth: \"1px\",\n      },\n      \".group[data-side=left][data-collapsible=offcanvas] &\": {\n        left: \"calc(var(--sidebar-width) * -1)\",\n      },\n      \".group[data-side=right] &\": {\n        right: \"0\",\n        borderLeftWidth: \"1px\",\n      },\n      \".group[data-side=right][data-collapsible=offcanvas] &\": {\n        right: \"calc(var(--sidebar-width) * -1)\",\n      },\n      \".group[data-collapsible=icon] &\": {\n        w: \"var(--sidebar-width-icon)\",\n      },\n      \".group[data-variant=floating] &, .group[data-variant=inset] &\": {\n        p: \"2\",\n      },\n      \".group[data-variant=floating][data-collapsible=icon] &, .group[data-variant=inset][data-collapsible=icon] &\":\n        {\n          w: \"calc(var(--sidebar-width-icon) + var(--spacing-4) + 2px)\",\n        },\n    },\n\n    trigger: {\n      w: \"7\",\n      h: \"7\",\n    },\n\n    rail: {\n      pos: \"absolute\",\n      insetY: \"0\",\n      zIndex: \"20\",\n      display: \"none\",\n      w: \"4\",\n      transform: \"translateX(-50%)\",\n      transition: \"all\",\n      transitionTimingFunction: \"linear\",\n      _after: {\n        content: '\"\"',\n        pos: \"absolute\",\n        insetY: \"0\",\n        left: \"50%\",\n        w: \"2px\",\n      },\n      _hover: {\n        _after: {\n          bg: \"sidebar.border\",\n        },\n      },\n      sm: { display: \"flex\" },\n      \".group[data-side=left] &\": { right: \"-4\" },\n      \".group[data-side=right] &\": { left: \"0\" },\n      \"[data-side=left] &\": { cursor: \"w-resize\" },\n      \"[data-side=right] &\": { cursor: \"e-resize\" },\n      \"[data-side=left][data-state=collapsed] &\": { cursor: \"e-resize\" },\n      \"[data-side=right][data-state=collapsed] &\": { cursor: \"w-resize\" },\n      \".group[data-collapsible=offcanvas] &\": {\n        transform: \"translateX(0)\",\n        _after: { left: \"100%\" },\n        _hover: { bg: \"sidebar\" },\n      },\n      \"[data-side=left][data-collapsible=offcanvas] &\": { right: \"-2\" },\n      \"[data-side=right][data-collapsible=offcanvas] &\": { left: \"-2\" },\n    },\n\n    inset: {\n      bg: \"bg\",\n      pos: \"relative\",\n      display: \"flex\",\n      flex: \"1\",\n      flexDir: \"column\",\n      w: \"full\",\n      md: {\n        \".peer[data-variant=inset] ~ &\": {\n          m: \"2\",\n          ml: \"0\",\n          rounded: \"xl\",\n          shadow: \"sm\",\n        },\n        \".peer[data-variant=inset][data-state=collapsed] ~ &\": { ml: \"2\" },\n      },\n    },\n\n    input: {\n      bg: \"bg\",\n      w: \"full\",\n      h: \"8\",\n      shadow: \"none\",\n    },\n\n    header: {\n      display: \"flex\",\n      flexDir: \"column\",\n      gap: \"2\",\n      p: \"2\",\n    },\n\n    footer: {\n      display: \"flex\",\n      flexDir: \"column\",\n      gap: \"2\",\n      p: \"2\",\n    },\n\n    separator: {\n      bg: \"sidebar.border\",\n      mx: \"2\",\n      w: \"auto\",\n    },\n\n    content: {\n      display: \"flex\",\n      flex: \"1\",\n      flexDir: \"column\",\n      gap: \"2\",\n      minH: \"0\",\n      overflow: \"auto\",\n      \".group[data-collapsible=icon] &\": { overflow: \"hidden\" },\n    },\n\n    group: {\n      pos: \"relative\",\n      display: \"flex\",\n      flexDir: \"column\",\n      w: \"full\",\n      minW: \"0\",\n      p: \"2\",\n    },\n\n    groupLabel: {\n      color: \"sidebar.fg/70\",\n      display: \"flex\",\n      alignItems: \"center\",\n      flexShrink: \"0\",\n      h: \"8\",\n      px: \"2\",\n      rounded: \"md\",\n      textStyle: \"xs\",\n      fontWeight: \"medium\",\n      transitionProperty: \"margin, opacity\",\n      transitionDuration: \"normal\",\n      transitionTimingFunction: \"linear\",\n      outlineColor: \"transparent\",\n      _focusVisible: {\n        outlineWidth: \"2px\",\n        outlineStyle: \"solid\",\n        outlineColor: \"sidebar.ring/50\",\n      },\n      \"& > svg\": {\n        w: \"4\",\n        h: \"4\",\n        flexShrink: \"0\",\n      },\n      \".group[data-collapsible=icon] &\": {\n        mt: \"-8\",\n        opacity: \"0\",\n      },\n    },\n\n    groupAction: {\n      color: \"sidebar.fg\",\n      pos: \"absolute\",\n      top: \"3.5\",\n      right: \"3\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      aspectRatio: \"square\",\n      w: \"5\",\n      p: \"0\",\n      rounded: \"md\",\n      outlineColor: \"transparent\",\n      transition: \"transform\",\n      _focusVisible: {\n        outlineWidth: \"2px\",\n        outlineStyle: \"solid\",\n        outlineColor: \"sidebar.ring/50\",\n      },\n      \"& > svg\": {\n        w: \"4\",\n        h: \"4\",\n        flexShrink: \"0\",\n      },\n      _after: {\n        pos: \"absolute\",\n        inset: \"-2\",\n        md: { display: \"none\" },\n      },\n      \".group[data-collapsible=icon] &\": {\n        display: \"none\",\n      },\n    },\n\n    groupContent: {\n      w: \"full\",\n      textStyle: \"sm\",\n    },\n\n    menu: {\n      display: \"flex\",\n      w: \"full\",\n      minW: \"0\",\n      flexDir: \"column\",\n      gap: \"1\",\n    },\n\n    menuItem: {\n      pos: \"relative\",\n    },\n\n    menuAction: {\n      pos: \"absolute\",\n      top: \"1.5\",\n      right: \"1\",\n      display: \"flex\",\n      aspectRatio: \"square\",\n      w: \"5\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      rounded: \"md\",\n      p: \"0\",\n      color: \"sidebar.fg\",\n      outlineColor: \"transparent\",\n      transition: \"transform\",\n      _hover: {\n        bg: \"sidebar.accent\",\n        color: \"sidebar.accent.fg\",\n      },\n      _focusVisible: {\n        outlineWidth: \"2px\",\n        outlineStyle: \"solid\",\n        outlineColor: \"sidebar.ring/50\",\n      },\n      \".peer-menu-button:hover ~ &\": {\n        color: \"sidebar.accent.fg\",\n      },\n      _after: {\n        pos: \"absolute\",\n        inset: \"-2\",\n        md: { display: \"none\" },\n      },\n      \".peer-menu-button[data-size=sm] ~ &\": {\n        top: \"1\",\n      },\n      \".peer-menu-button[data-size=md] ~ &\": {\n        top: \"1.5\",\n      },\n      \".peer-menu-button[data-size=lg] ~ &\": {\n        top: \"2.5\",\n      },\n      \".group[data-collapsible=icon] &\": {\n        display: \"none\",\n      },\n      \"&[data-show-on-hover=true]\": {\n        \".peer-menu-button[data-active=true] ~ &\": {\n          color: \"sidebar.accent.fg\",\n        },\n        \".group-menu-item:focus-within &\": {\n          opacity: \"1\",\n        },\n        \".group-menu-item:hover &\": {\n          opacity: \"1\",\n        },\n        _open: { opacity: \"1\" },\n        md: { opacity: \"0\" },\n      },\n    },\n\n    menuBadge: {\n      color: \"sidebar.fg\",\n      pointerEvents: \"none\",\n      pos: \"absolute\",\n      right: \"1\",\n      display: \"flex\",\n      minW: \"5\",\n      h: \"5\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      rounded: \"md\",\n      px: \"1\",\n      textStyle: \"xs\",\n      fontWeight: \"medium\",\n      fontVariantNumeric: \"tabular-nums\",\n      userSelect: \"none\",\n      \".peer-menu-button:hover ~ &\": {\n        color: \"sidebar.accent.fg\",\n      },\n      \".peer-menu-button[data-active=true] ~ &\": {\n        color: \"sidebar.accent.fg\",\n      },\n      \".peer-menu-button[data-size=sm] ~ &\": {\n        top: \"1\",\n      },\n      \".peer-menu-button[data-size=md] ~ &\": {\n        top: \"1.5\",\n      },\n      \".peer-menu-button[data-size=lg] ~ &\": {\n        top: \"2.5\",\n      },\n      \".group[data-collapsible=icon] &\": {\n        display: \"none\",\n      },\n    },\n\n    menuSkeleton: {\n      display: \"flex\",\n      h: \"8\",\n      alignItems: \"center\",\n      gap: \"2\",\n      rounded: \"md\",\n      px: \"2\",\n    },\n\n    menuSub: {\n      borderColor: \"sidebar.border\",\n      mx: \"3.5\",\n      display: \"flex\",\n      minW: \"0\",\n      transform: \"translateX(-1px)\",\n      flexDir: \"column\",\n      gap: \"1\",\n      borderLeftWidth: \"1px\",\n      px: \"2.5\",\n      py: \"0.5\",\n      \".group[data-collapsible=icon] &\": {\n        display: \"none\",\n      },\n    },\n\n    menuSubItem: {\n      pos: \"relative\",\n    },\n\n    menuSubButton: {\n      display: \"flex\",\n      alignItems: \"center\",\n      gap: \"2\",\n      minW: \"0\",\n      h: \"7\",\n      px: \"2\",\n      color: \"sidebar.fg\",\n      transform: \"translateX(-1px)\",\n      outlineColor: \"transparent\",\n      overflow: \"hidden\",\n      rounded: \"md\",\n      _hover: {\n        bg: \"sidebar.accent\",\n        color: \"sidebar.accent.fg\",\n      },\n      \"&[data-active=true]\": {\n        bg: \"sidebar.accent\",\n        color: \"sidebar.accent.fg\",\n      },\n      _focusVisible: {\n        outlineWidth: \"2px\",\n        outlineStyle: \"solid\",\n        outlineColor: \"sidebar.ring/50\",\n      },\n      _disabled: {\n        pointerEvents: \"none\",\n        opacity: \"0.5\",\n      },\n      \"&[data-size=sm]\": { textStyle: \"xs\" },\n      \"&[data-size=md]\": { textStyle: \"sm\" },\n      \".group[data-collapsible=icon] &\": {\n        display: \"none\",\n      },\n      \"& > svg\": {\n        w: \"4\",\n        h: \"4\",\n        flexShrink: \"0\",\n        color: \"sidebar.accent.fg\",\n        _last: {\n          truncate: true,\n        },\n      },\n    },\n  },\n});\n"
    }
  ]
}