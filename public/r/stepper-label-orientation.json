{
  "name": "stepper-label-orientation",
  "type": "registry:example",
  "registryDependencies": [
    "stepper"
  ],
  "files": [
    {
      "path": "registry/default/examples/stepper-label-orientation.tsx",
      "type": "registry:example",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { styled } from \"styled-system/jsx\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport { Label } from \"@/registry/default/ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@/registry/default/ui/radio-group\";\nimport { defineStepper } from \"@/registry/default/ui/stepper\";\n\ntype LabelOrientation = \"horizontal\" | \"vertical\";\n\nconst {\n  StepperProvider,\n  StepperControls,\n  StepperNavigation,\n  StepperPanel,\n  StepperStep,\n  StepperTitle,\n} = defineStepper(\n  {\n    id: \"step-1\",\n    title: \"Step 1\",\n  },\n  {\n    id: \"step-2\",\n    title: \"Step 2\",\n  },\n  {\n    id: \"step-3\",\n    title: \"Step 3\",\n  }\n);\n\nexport default function StepperVariants() {\n  const [labelOrientation, setLabelOrientation] = React.useState<LabelOrientation>(\"horizontal\");\n  return (\n    <styled.div css={{ display: \"flex\", w: \"full\", flexDir: \"column\", gap: \"8\" }}>\n      <RadioGroup\n        value={labelOrientation}\n        onValueChange={(value) => setLabelOrientation(value as LabelOrientation)}\n      >\n        <styled.div css={{ display: \"flex\", alignItems: \"center\", columnGap: \"2\" }}>\n          <RadioGroupItem value=\"horizontal\" id=\"horizontal-label\" />\n          <Label htmlFor=\"horizontal-label\">Horizontal</Label>\n        </styled.div>\n        <styled.div css={{ display: \"flex\", alignItems: \"center\", columnGap: \"2\" }}>\n          <RadioGroupItem value=\"vertical\" id=\"vertical-label\" />\n          <Label htmlFor=\"vertical-label\">Vertical</Label>\n        </styled.div>\n      </RadioGroup>\n      <StepperProvider\n        variant=\"horizontal\"\n        labelOrientation={labelOrientation}\n        css={{ spaceY: \"4\" }}\n      >\n        {({ methods }) => (\n          <React.Fragment>\n            <StepperNavigation>\n              {methods.all.map((step) => (\n                <StepperStep key={step.id} of={step.id} onClick={() => methods.goTo(step.id)}>\n                  <StepperTitle>{step.title}</StepperTitle>\n                </StepperStep>\n              ))}\n            </StepperNavigation>\n            {methods.switch({\n              \"step-1\": (step) => <Content id={step.id} />,\n              \"step-2\": (step) => <Content id={step.id} />,\n              \"step-3\": (step) => <Content id={step.id} />,\n            })}\n            <StepperControls>\n              {!methods.isLast && (\n                <Button variant=\"secondary\" onClick={methods.prev} disabled={methods.isFirst}>\n                  Previous\n                </Button>\n              )}\n              <Button onClick={methods.isLast ? methods.reset : methods.next}>\n                {methods.isLast ? \"Reset\" : \"Next\"}\n              </Button>\n            </StepperControls>\n          </React.Fragment>\n        )}\n      </StepperProvider>\n    </styled.div>\n  );\n}\n\nconst Content = ({ id }: { id: string }) => {\n  return (\n    <StepperPanel\n      css={{\n        h: \"200px\",\n        alignContent: \"center\",\n        rounded: \"md\",\n        borderWidth: \"1px\",\n        bg: \"slate.50\",\n        p: \"8\",\n        _dark: { bg: \"slate.950\" },\n      }}\n    >\n      <styled.p css={{ textStyle: \"xl\", fontWeight: \"normal\" }}>Content for {id}</styled.p>\n    </StepperPanel>\n  );\n};\n"
    }
  ]
}