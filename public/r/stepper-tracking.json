{
  "name": "stepper-tracking",
  "type": "registry:example",
  "registryDependencies": [
    "stepper"
  ],
  "files": [
    {
      "path": "registry/default/examples/stepper-tracking.tsx",
      "type": "registry:example",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { styled } from \"styled-system/jsx\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport { Label } from \"@/registry/default/ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@/registry/default/ui/radio-group\";\nimport { defineStepper } from \"@/registry/default/ui/stepper\";\n\nconst {\n  StepperProvider,\n  StepperControls,\n  StepperNavigation,\n  StepperPanel,\n  StepperStep,\n  StepperTitle,\n} = defineStepper(\n  {\n    id: \"step-1\",\n    title: \"Step 1\",\n  },\n  {\n    id: \"step-2\",\n    title: \"Step 2\",\n  },\n  {\n    id: \"step-3\",\n    title: \"Step 3\",\n  },\n  {\n    id: \"step-4\",\n    title: \"Step 4\",\n  },\n  {\n    id: \"step-5\",\n    title: \"Step 5\",\n  },\n  {\n    id: \"step-6\",\n    title: \"Step 6\",\n  }\n);\n\nexport default function StepperVerticalFollow() {\n  const [tracking, setTracking] = React.useState(false);\n\n  return (\n    <styled.div css={{ display: \"flex\", w: \"full\", flexDir: \"column\", gap: \"8\" }}>\n      <RadioGroup\n        value={tracking.toString()}\n        onValueChange={(value) => setTracking(value === \"true\")}\n      >\n        <styled.div css={{ display: \"flex\", alignItems: \"center\", columnGap: \"2\" }}>\n          <RadioGroupItem value=\"true\" id=\"tracking\" />\n          <Label htmlFor=\"tracking\">Tracking</Label>\n        </styled.div>\n        <styled.div css={{ display: \"flex\", alignItems: \"center\", columnGap: \"2\" }}>\n          <RadioGroupItem value=\"false\" id=\"no-tracking\" />\n          <Label htmlFor=\"no-tracking\">No Tracking</Label>\n        </styled.div>\n      </RadioGroup>\n      <StepperProvider variant=\"vertical\" tracking={tracking} css={{ spaceY: \"4\" }}>\n        {({ methods }) => (\n          <React.Fragment>\n            <StepperNavigation>\n              {methods.all.map((step) => (\n                <StepperStep key={step.id} of={step.id} onClick={() => methods.goTo(step.id)}>\n                  <StepperTitle>{step.title}</StepperTitle>\n                  {methods.when(step.id, () => (\n                    <StepperPanel css={{ spaceY: \"4\" }}>\n                      <styled.div\n                        css={{\n                          h: \"200px\",\n                          alignContent: \"center\",\n                          rounded: \"md\",\n                          borderWidth: \"1px\",\n                          bg: \"slate.50\",\n                          p: \"8\",\n                          _dark: { bg: \"slate.950\" },\n                        }}\n                      >\n                        <styled.p css={{ textStyle: \"xl\", fontWeight: \"normal\" }}>\n                          Content for {step.id}\n                        </styled.p>\n                      </styled.div>\n                      <StepperControls>\n                        {!methods.isLast && (\n                          <Button\n                            variant=\"secondary\"\n                            onClick={methods.prev}\n                            disabled={methods.isFirst}\n                          >\n                            Previous\n                          </Button>\n                        )}\n                        <Button onClick={methods.isLast ? methods.reset : methods.next}>\n                          {methods.isLast ? \"Reset\" : \"Next\"}\n                        </Button>\n                      </StepperControls>\n                    </StepperPanel>\n                  ))}\n                </StepperStep>\n              ))}\n            </StepperNavigation>\n          </React.Fragment>\n        )}\n      </StepperProvider>\n    </styled.div>\n  );\n}\n"
    }
  ]
}