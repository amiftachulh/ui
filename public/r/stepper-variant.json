{
  "name": "stepper-variant",
  "type": "registry:example",
  "registryDependencies": [
    "stepper"
  ],
  "files": [
    {
      "path": "registry/default/examples/stepper-variant.tsx",
      "type": "registry:example",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { styled } from \"styled-system/jsx\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport { Label } from \"@/registry/default/ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@/registry/default/ui/radio-group\";\nimport { defineStepper } from \"@/registry/default/ui/stepper\";\n\ntype Variant = \"horizontal\" | \"vertical\" | \"circle\";\n\nconst {\n  StepperProvider,\n  StepperControls,\n  StepperNavigation,\n  StepperPanel,\n  StepperStep,\n  StepperTitle,\n} = defineStepper(\n  {\n    id: \"step-1\",\n    title: \"Step 1\",\n  },\n  {\n    id: \"step-2\",\n    title: \"Step 2\",\n  },\n  {\n    id: \"step-3\",\n    title: \"Step 3\",\n  }\n);\n\nexport default function StepperVariant() {\n  const [variant, setVariant] = React.useState<Variant>(\"horizontal\");\n\n  return (\n    <styled.div css={{ display: \"flex\", w: \"full\", flexDir: \"column\", gap: \"8\" }}>\n      <RadioGroup value={variant} onValueChange={(value) => setVariant(value as Variant)}>\n        <styled.div css={{ display: \"flex\", alignItems: \"center\", columnGap: \"2\" }}>\n          <RadioGroupItem value=\"horizontal\" id=\"horizontal-variant\" />\n          <Label htmlFor=\"horizontal-variant\">Horizontal</Label>\n        </styled.div>\n        <styled.div css={{ display: \"flex\", alignItems: \"center\", columnGap: \"2\" }}>\n          <RadioGroupItem value=\"vertical\" id=\"vertical-variant\" />\n          <Label htmlFor=\"vertical-variant\">Vertical</Label>\n        </styled.div>\n        <styled.div css={{ display: \"flex\", alignItems: \"center\", columnGap: \"2\" }}>\n          <RadioGroupItem value=\"circle\" id=\"circle-variant\" />\n          <Label htmlFor=\"circle-variant\">Circle</Label>\n        </styled.div>\n      </RadioGroup>\n      {variant === \"horizontal\" && <HorizontalStepper />}\n      {variant === \"vertical\" && <VerticalStepper />}\n      {variant === \"circle\" && <CircleStepper />}\n    </styled.div>\n  );\n}\n\nconst HorizontalStepper = () => {\n  return (\n    <StepperProvider variant=\"horizontal\" css={{ spaceY: \"4\" }}>\n      {({ methods }) => (\n        <React.Fragment>\n          <StepperNavigation>\n            {methods.all.map((step) => (\n              <StepperStep key={step.id} of={step.id} onClick={() => methods.goTo(step.id)}>\n                <StepperTitle>{step.title}</StepperTitle>\n              </StepperStep>\n            ))}\n          </StepperNavigation>\n          {methods.switch({\n            \"step-1\": (step) => <Content id={step.id} />,\n            \"step-2\": (step) => <Content id={step.id} />,\n            \"step-3\": (step) => <Content id={step.id} />,\n          })}\n          <StepperControls>\n            {!methods.isLast && (\n              <Button variant=\"secondary\" onClick={methods.prev} disabled={methods.isFirst}>\n                Previous\n              </Button>\n            )}\n            <Button onClick={methods.isLast ? methods.reset : methods.next}>\n              {methods.isLast ? \"Reset\" : \"Next\"}\n            </Button>\n          </StepperControls>\n        </React.Fragment>\n      )}\n    </StepperProvider>\n  );\n};\n\nconst Content = ({ id }: { id: string }) => {\n  return (\n    <StepperPanel\n      css={{\n        h: \"200px\",\n        alignContent: \"center\",\n        rounded: \"md\",\n        borderWidth: \"1px\",\n        bg: \"slate.50\",\n        p: \"8\",\n        _dark: { bg: \"slate.950\" },\n      }}\n    >\n      <styled.p css={{ textStyle: \"xl\", fontWeight: \"normal\" }}>Content for {id}</styled.p>\n    </StepperPanel>\n  );\n};\n\nconst VerticalStepper = () => {\n  return (\n    <StepperProvider variant=\"vertical\" css={{ spaceY: \"4\" }}>\n      {({ methods }) => (\n        <>\n          <StepperNavigation>\n            {methods.all.map((step) => (\n              <StepperStep key={step.id} of={step.id} onClick={() => methods.goTo(step.id)}>\n                <StepperTitle>{step.title}</StepperTitle>\n                {methods.when(step.id, () => (\n                  <StepperPanel\n                    css={{\n                      h: \"200px\",\n                      alignContent: \"center\",\n                      rounded: \"md\",\n                      borderWidth: \"1px\",\n                      bg: \"slate.50\",\n                      p: \"8\",\n                      _dark: { bg: \"slate.950\" },\n                    }}\n                  >\n                    <styled.p css={{ textStyle: \"xl\", fontWeight: \"normal\" }}>\n                      Content for {step.id}\n                    </styled.p>\n                  </StepperPanel>\n                ))}\n              </StepperStep>\n            ))}\n          </StepperNavigation>\n          <StepperControls>\n            {!methods.isLast && (\n              <Button variant=\"secondary\" onClick={methods.prev} disabled={methods.isFirst}>\n                Previous\n              </Button>\n            )}\n            <Button onClick={methods.isLast ? methods.reset : methods.next}>\n              {methods.isLast ? \"Reset\" : \"Next\"}\n            </Button>\n          </StepperControls>\n        </>\n      )}\n    </StepperProvider>\n  );\n};\n\nconst CircleStepper = () => {\n  return (\n    <StepperProvider variant=\"circle\" css={{ spaceY: \"4\" }}>\n      {({ methods }) => (\n        <React.Fragment>\n          <StepperNavigation>\n            <StepperStep of={methods.current.id}>\n              <StepperTitle>{methods.current.title}</StepperTitle>\n            </StepperStep>\n          </StepperNavigation>\n          {methods.when(methods.current.id, () => (\n            <StepperPanel\n              css={{\n                h: \"200px\",\n                alignContent: \"center\",\n                rounded: \"md\",\n                borderWidth: \"1px\",\n                bg: \"slate.50\",\n                p: \"8\",\n                _dark: { bg: \"slate.950\" },\n              }}\n            >\n              <styled.p css={{ textStyle: \"xl\", fontWeight: \"normal\" }}>\n                Content for {methods.current.id}\n              </styled.p>\n            </StepperPanel>\n          ))}\n          <StepperControls>\n            {!methods.isLast && (\n              <Button variant=\"secondary\" onClick={methods.prev} disabled={methods.isFirst}>\n                Previous\n              </Button>\n            )}\n            <Button onClick={methods.isLast ? methods.reset : methods.next}>\n              {methods.isLast ? \"Reset\" : \"Next\"}\n            </Button>\n          </StepperControls>\n        </React.Fragment>\n      )}\n    </StepperProvider>\n  );\n};\n"
    }
  ]
}