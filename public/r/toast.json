{
  "name": "toast",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-toast"
  ],
  "files": [
    {
      "path": "registry/default/ui/toast.tsx",
      "type": "registry:ui",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { LuX } from \"react-icons/lu\";\nimport * as ToastPrimitive from \"@radix-ui/react-toast\";\nimport { css, cx } from \"styled-system/css\";\nimport { styled } from \"styled-system/jsx\";\nimport { toast, type ToastVariantProps } from \"styled-system/recipes\";\n\nconst classes = toast();\n\nconst ToastProvider = ToastPrimitive.Provider;\n\nfunction Viewport({ className, ...props }: React.ComponentProps<typeof ToastPrimitive.Viewport>) {\n  return <ToastPrimitive.Viewport className={cx(classes.viewport, className)} {...props} />;\n}\nconst ToastViewport = styled(Viewport);\nToastViewport.displayName = ToastPrimitive.Viewport.displayName;\n\nfunction Root({\n  className,\n  variant,\n  ...props\n}: React.ComponentProps<typeof ToastPrimitive.Root> & ToastVariantProps) {\n  return (\n    <ToastPrimitive.Root className={cx(\"group\", toast({ variant }).root, className)} {...props} />\n  );\n}\nconst Toast = styled(Root);\nToast.displayName = ToastPrimitive.Root.displayName;\n\nfunction Action({ className, ...props }: React.ComponentProps<typeof ToastPrimitive.Action>) {\n  return <ToastPrimitive.Action className={cx(classes.action, className)} {...props} />;\n}\nconst ToastAction = styled(Action);\nToastAction.displayName = ToastPrimitive.Action.displayName;\n\nfunction Close({ className, ...props }: React.ComponentProps<typeof ToastPrimitive.Close>) {\n  return (\n    <ToastPrimitive.Close className={cx(classes.close, className)} toast-close=\"\" {...props}>\n      <LuX className={css({ w: \"4\", h: \"4\" })} />\n    </ToastPrimitive.Close>\n  );\n}\nconst ToastClose = styled(Close);\nToastClose.displayName = ToastPrimitive.Close.displayName;\n\nfunction Title({ className, ...props }: React.ComponentProps<typeof ToastPrimitive.Title>) {\n  return <ToastPrimitive.Title className={cx(classes.title, className)} {...props} />;\n}\nconst ToastTitle = styled(Title);\nToastTitle.displayName = ToastPrimitive.Title.displayName;\n\nfunction Description({\n  className,\n  ...props\n}: React.ComponentProps<typeof ToastPrimitive.Description>) {\n  return <ToastPrimitive.Description className={cx(classes.description, className)} {...props} />;\n}\nconst ToastDescription = styled(Description);\nToastDescription.displayName = ToastPrimitive.Description.displayName;\n\ntype ToastProps = React.ComponentProps<typeof Toast>;\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>;\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n};\n"
    },
    {
      "path": "registry/default/hooks/use-toast.ts",
      "type": "registry:hook",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport type { ToastActionElement, ToastProps } from \"@/registry/default/ui/toast\";\n\nconst TOAST_LIMIT = 1;\nconst TOAST_REMOVE_DELAY = 3000;\n\ntype ToasterToast = ToastProps & {\n  id: string;\n  title?: React.ReactNode;\n  description?: React.ReactNode;\n  action?: ToastActionElement;\n};\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const;\n\nlet count = 0;\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER;\n  return count.toString();\n}\n\ntype ActionType = typeof actionTypes;\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"];\n      toast: ToasterToast;\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"];\n      toast: Partial<ToasterToast>;\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"];\n      toastId?: ToasterToast[\"id\"];\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"];\n      toastId?: ToasterToast[\"id\"];\n    };\n\ninterface State {\n  toasts: ToasterToast[];\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return;\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId);\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    });\n  }, TOAST_REMOVE_DELAY);\n\n  toastTimeouts.set(toastId, timeout);\n};\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      };\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) => (t.id === action.toast.id ? { ...t, ...action.toast } : t)),\n      };\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action;\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId);\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id);\n        });\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      };\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        };\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      };\n  }\n};\n\nconst listeners: Array<(state: State) => void> = [];\n\nlet memoryState: State = { toasts: [] };\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action);\n  listeners.forEach((listener) => {\n    listener(memoryState);\n  });\n}\n\ntype Toast = Omit<ToasterToast, \"id\">;\n\nfunction toast({ ...props }: Toast) {\n  const id = genId();\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    });\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id });\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open: boolean) => {\n        if (!open) dismiss();\n      },\n    },\n  });\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  };\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState);\n\n  React.useEffect(() => {\n    listeners.push(setState);\n    return () => {\n      const index = listeners.indexOf(setState);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    };\n  }, [state]);\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  };\n}\n\nexport { useToast, toast };\n"
    },
    {
      "path": "registry/default/ui/toaster.tsx",
      "type": "registry:ui",
      "content": "\"use client\";\n\nimport { styled } from \"styled-system/jsx\";\nimport { useToast } from \"@/registry/default/hooks/use-toast\";\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/registry/default/ui/toast\";\n\nexport function Toaster() {\n  const { toasts } = useToast();\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <styled.div css={{ display: \"grid\", gap: \"1\" }}>\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && <ToastDescription>{description}</ToastDescription>}\n            </styled.div>\n            {action}\n            <ToastClose />\n          </Toast>\n        );\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  );\n}\n"
    }
  ]
}