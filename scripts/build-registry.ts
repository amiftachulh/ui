import fs from "fs/promises";
import path from "path";
import { getAllBlocks } from "@/lib/blocks";
import { registry } from "@/registry";
import { registryItemSchema, registrySchema } from "@/registry/schema";

async function buildRegistryIndex() {
  let index = `/* eslint-disable @typescript-eslint/ban-ts-comment */
// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.
import * as React from "react"

export const Index: Record<string, any> = {`;
  for (const item of registry.items) {
    const resolveFiles = item.files?.map((file) => `registry/default/${file.path}`);
    if (!resolveFiles) {
      continue;
    }

    const componentPath = item.files?.[0]?.path ? `@/registry/default/${item.files[0].path}` : "";

    index += `
  "${item.name}": {
    name: "${item.name}",
    description: "${item.description ?? ""}",
    type: "${item.type}",
    registryDependencies: ${JSON.stringify(item.registryDependencies)},
    files: [${item.files?.map((file) => {
      const filePath = `src/registry/default/${typeof file === "string" ? file : file.path}`;
      const resolvedFilePath = path.resolve(filePath);
      return typeof file === "string"
        ? `"${resolvedFilePath}"`
        : `{
      path: "${filePath}",
      type: "${file.type}",
      target: "${file.target ?? ""}"
    }`;
    })}],
    component: ${
      componentPath
        ? `React.lazy(async () => {
      const mod = await import("${componentPath}")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    })`
        : "null"
    },
    categories: ${JSON.stringify(item.categories)},
    meta: ${JSON.stringify(item.meta)},
  },`;
  }

  index += `
  }`;

  console.log(`#️⃣  ${Object.keys(registry.items).length} items found`);

  // Write style index.
  const targetPath = path.join(process.cwd(), "src/registry/__index__.tsx");
  await fs.rm(targetPath, { force: true });
  await fs.writeFile(targetPath, index);
}

async function buildRegistryJsonFile() {
  // Fix the path for registry items
  const fixedRegistry = {
    ...registry,
    items: registry.items.map((item) => {
      const files = item.files?.map((file) => {
        return {
          ...file,
          path: `registry/default/${file.path}`,
        };
      });

      return {
        ...item,
        files,
      };
    }),
  };

  // Write the content of the registry to `registry.json`
  const targetPath = path.join(process.cwd(), "registry.json");
  await fs.rm(targetPath, { force: true });
  await fs.writeFile(targetPath, JSON.stringify(fixedRegistry, null, 2));

  // Clean up and copy the registry.json to the `public/r/` directory
  const publicRPath = path.join(process.cwd(), "public/r");
  await fs.mkdir(publicRPath, { recursive: true });

  // Delete json files
  const files = await fs.readdir(publicRPath);
  for (const file of files) {
    if (file.endsWith(".json")) {
      await fs.rm(path.join(publicRPath, file), { force: true });
    }
  }

  await fs.cp(targetPath, path.join(publicRPath, "registry.json"), {
    recursive: true,
  });
}

async function buildRegistry() {
  const registryPath = path.join(process.cwd(), "registry.json");
  const content = await fs.readFile(registryPath, "utf-8");
  const result = registrySchema.safeParse(JSON.parse(content));
  if (!result.success) {
    console.error("❌ Invalid registry.json");
    process.exit(1);
  }

  for (const registryItem of result.data.items) {
    // Loop through each file in the files array
    for (const file of registryItem.files ?? []) {
      file["content"] = await fs.readFile(`src/${file.path}`, "utf-8");
    }

    // Validate the registry item
    const result = registryItemSchema.safeParse(registryItem);
    if (!result.success) {
      console.error(`❌ Invalid registry item: ${registryItem.name}`);
      continue;
    }

    // Write the registry item to `public/r/{item.name}.json`
    const itemPath = path.join(process.cwd(), `public/r/${registryItem.name}.json`);
    await fs.writeFile(itemPath, JSON.stringify(registryItem, null, 2));
  }

  // Copy registry.json to public/r/registry.json
  await fs.copyFile(registryPath, path.join(process.cwd(), "public/r/registry.json"));
}

async function buildBlocksIndex() {
  const blocks = await getAllBlocks(["registry:block"]);

  const payload = blocks.map((block) => ({
    name: block.name,
    description: block.description,
    categories: block.categories,
  }));

  const targetPath = path.join(process.cwd(), "src/registry/__blocks__.json");

  await fs.rm(targetPath, { force: true });
  await fs.writeFile(targetPath, JSON.stringify(payload, null, 2));
}

async function main() {
  console.log("🗂️ Building registry/__index__.tsx...");
  await buildRegistryIndex();

  console.log("🗂️ Building registry/__blocks__.json...");
  await buildBlocksIndex();

  console.log("💅 Building registry.json...");
  await buildRegistryJsonFile();

  console.log("🏗️ Building registry...");
  await buildRegistry();
}

main().catch((error) => {
  console.error(error);
  process.exit(1);
});
